{
  "address": "0x2b5a0aEE56c23Bed338e4f6B1048b9fA213d97B3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "raisePool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payValue",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityFund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityFundRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "raiserShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investorShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "servicerShare",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "companyId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ILetsFilRaiseInfo.RaiseInfo",
          "name": "raiseInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nodeSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sectorSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sealPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nodePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "opsSecurityFund",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "opsSecurityFundPayer",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "minerID",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct ILetsFilRaiseInfo.NodeInfo",
          "name": "nodeInfo",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raiseID",
          "type": "uint256"
        }
      ],
      "name": "eCreateRaisePlan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "eTest",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityFund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityFundRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "raiserShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investorShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "servicerShare",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "companyId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ILetsFilRaiseInfo.RaiseInfo",
          "name": "_raiseInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nodeSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sectorSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sealPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nodePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "opsSecurityFund",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "opsSecurityFundPayer",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "minerID",
              "type": "uint64"
            }
          ],
          "internalType": "struct ILetsFilRaiseInfo.NodeInfo",
          "name": "_nodeInfo",
          "type": "tuple"
        }
      ],
      "name": "createRaisePlan",
      "outputs": [
        {
          "internalType": "address",
          "name": "planAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raiseID",
          "type": "uint256"
        }
      ],
      "name": "endPlan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b66ca7abd14d4422cb8576f198686fea090a6bbe72dba6f012f82925336244d",
  "receipt": {
    "to": null,
    "from": "0x47C1Cbb1D676B4464c19C5c58deaA50bA468C69B",
    "contractAddress": "0x2b5a0aEE56c23Bed338e4f6B1048b9fA213d97B3",
    "transactionIndex": 0,
    "gasUsed": "104634065",
    "logsBloom": "0x00000001400000200000080001c880000000000010008040008000860a0802000000000010000000000000000000000020000000040000140400000001080000040000002000000010000040000200000001000000010000000020000000000110000020128001000000080000020800000400400000000000080000000004400000000000800200004000080000000000000000200000a00000000000004000000000000000000020000000400000000000000000002000008300200001000000200100000000010000000008000000000240000020000010800020000020c90400010000000000010000001000000000000080000000000008080320000000",
    "blockHash": "0x663f2435cb861f5a21efc195bebc018f21b7304d588b771342e89cedba17c03d",
    "transactionHash": "0x8b66ca7abd14d4422cb8576f198686fea090a6bbe72dba6f012f82925336244d",
    "logs": [],
    "blockNumber": 266688,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x47C1Cbb1D676B4464c19C5c58deaA50bA468C69B"
  ],
  "numDeployments": 2,
  "solcInputHash": "1bb16592d4f24d7291b2cf6bef7d76b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"raisePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityFundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiserShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"companyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ILetsFilRaiseInfo.RaiseInfo\",\"name\":\"raiseInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nodeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sectorSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sealPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"opsSecurityFund\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"opsSecurityFundPayer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minerID\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct ILetsFilRaiseInfo.NodeInfo\",\"name\":\"nodeInfo\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raiseID\",\"type\":\"uint256\"}],\"name\":\"eCreateRaisePlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"eTest\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityFundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiserShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"companyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spAddress\",\"type\":\"address\"}],\"internalType\":\"struct ILetsFilRaiseInfo.RaiseInfo\",\"name\":\"_raiseInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nodeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sectorSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sealPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"opsSecurityFund\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"opsSecurityFundPayer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minerID\",\"type\":\"uint64\"}],\"internalType\":\"struct ILetsFilRaiseInfo.NodeInfo\",\"name\":\"_nodeInfo\",\"type\":\"tuple\"}],\"name\":\"createRaisePlan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"planAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raiseID\",\"type\":\"uint256\"}],\"name\":\"endPlan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LetsFilRaiseFactory.sol\":\"LetsFilRaiseFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zondax/filecoin-solidity/contracts/v0.8/MinerAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./types/MinerTypes.sol\\\";\\nimport \\\"./types/CommonTypes.sol\\\";\\nimport \\\"./cbor/MinerCbor.sol\\\";\\nimport \\\"./cbor/FilecoinCbor.sol\\\";\\nimport \\\"./cbor/BytesCbor.sol\\\";\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\n\\n/// @title This library is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed.\\n/// @notice During miner initialization, a miner actor is created on the chain, and this actor gives the miner its ID f0.... The miner actor is in charge of collecting all the payments sent to the miner.\\n/// @dev For more info about the miner actor, please refer to https://lotus.filecoin.io/storage-providers/operate/addresses/\\n/// @author Zondax AG\\nlibrary MinerAPI {\\n    using MinerCBOR for *;\\n    using FilecoinCBOR for *;\\n    using BytesCBOR for bytes;\\n\\n    /// @notice Income and returned collateral are paid to this address\\n    /// @notice This address is also allowed to change the worker address for the miner\\n    /// @param target The miner actor id you want to interact with\\n    /// @return the owner address of a Miner\\n    function getOwner(CommonTypes.FilActorId target) internal returns (MinerTypes.GetOwnerReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetOwnerMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetOwnerReturn();\\n    }\\n\\n    /// @param target  The miner actor id you want to interact with\\n    /// @param addr New owner address\\n    /// @notice Proposes or confirms a change of owner address.\\n    /// @notice If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address.\\n    function changeOwnerAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal {\\n        bytes memory raw_request = addr.serializeAddress();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeOwnerAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target  The miner actor id you want to interact with\\n    /// @param addr The \\\"controlling\\\" addresses are the Owner, the Worker, and all Control Addresses.\\n    /// @return Whether the provided address is \\\"controlling\\\".\\n    function isControllingAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal returns (bool) {\\n        bytes memory raw_request = addr.serializeAddress();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.IsControllingAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBool();\\n    }\\n\\n    /// @return the miner's sector size.\\n    /// @param target The miner actor id you want to interact with\\n    /// @dev For more information about sector sizes, please refer to https://spec.filecoin.io/systems/filecoin_mining/sector/#section-systems.filecoin_mining.sector\\n    function getSectorSize(CommonTypes.FilActorId target) internal returns (uint64) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetSectorSizeMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeUint64();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @notice This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)\\n    /// @notice Can go negative if the miner is in IP debt.\\n    /// @return the available balance of this miner.\\n    function getAvailableBalance(CommonTypes.FilActorId target) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetAvailableBalanceMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @return the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples.\\n    function getVestingFunds(CommonTypes.FilActorId target) internal returns (MinerTypes.GetVestingFundsReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetVestingFundsMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetVestingFundsReturn();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @notice Proposes or confirms a change of beneficiary address.\\n    /// @notice A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.\\n    /// @notice See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md\\n    function changeBeneficiary(CommonTypes.FilActorId target, MinerTypes.ChangeBeneficiaryParams memory params) internal {\\n        bytes memory raw_request = params.serializeChangeBeneficiaryParams();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeBeneficiaryMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @notice This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.\\n    /// @notice Retrieves the currently active and proposed beneficiary information.\\n    function getBeneficiary(CommonTypes.FilActorId target) internal returns (MinerTypes.GetBeneficiaryReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetBeneficiaryMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetBeneficiaryReturn();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function changeWorkerAddress(CommonTypes.FilActorId target, MinerTypes.ChangeWorkerAddressParams memory params) internal {\\n        bytes memory raw_request = params.serializeChangeWorkerAddressParams();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeWorkerAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function changePeerId(CommonTypes.FilActorId target, CommonTypes.FilAddress memory newId) internal {\\n        bytes memory raw_request = newId.serializeArrayFilAddress();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangePeerIDMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function changeMultiaddresses(CommonTypes.FilActorId target, MinerTypes.ChangeMultiaddrsParams memory params) internal {\\n        bytes memory raw_request = params.serializeChangeMultiaddrsParams();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeMultiaddrsMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function repayDebt(CommonTypes.FilActorId target) internal {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.RepayDebtMethodNum, Misc.NONE_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function confirmChangeWorkerAddress(CommonTypes.FilActorId target) internal {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ConfirmChangeWorkerAddressMethodNum, Misc.NONE_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function getPeerId(CommonTypes.FilActorId target) internal returns (CommonTypes.FilAddress memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetPeerIDMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeArrayFilAddress();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function getMultiaddresses(CommonTypes.FilActorId target) internal returns (MinerTypes.GetMultiaddrsReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetMultiaddrsMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetMultiaddrsReturn();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @param amount the amount you want to withdraw\\n    function withdrawBalance(CommonTypes.FilActorId target, CommonTypes.BigInt memory amount) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = amount.serializeArrayBigInt();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.WithdrawBalanceMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n}\\n\",\"keccak256\":\"0x441de61a7d91510848def8bb0c0acbae12a79973ea604dc82d6a18dd9cb796fb\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/BigIntCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for BigInt type\\n/// @author Zondax AG\\nlibrary BigIntCBOR {\\n    /// @notice serialize BigInt instance to bytes\\n    /// @param num BigInt instance to serialize\\n    /// @return serialized BigInt as bytes\\n    function serializeBigInt(CommonTypes.BigInt memory num) internal pure returns (bytes memory) {\\n        bytes memory raw = new bytes(num.val.length + 1);\\n\\n        raw[0] = num.neg == true ? bytes1(0x01) : bytes1(0x00);\\n\\n        uint index = 1;\\n        for (uint i = 0; i < num.val.length; i++) {\\n            raw[index] = num.val[i];\\n            index++;\\n        }\\n\\n        return raw;\\n    }\\n\\n    /// @notice deserialize big int (encoded as bytes) to BigInt instance\\n    /// @param raw as bytes to parse\\n    /// @return parsed BigInt instance\\n    function deserializeBigInt(bytes memory raw) internal pure returns (CommonTypes.BigInt memory) {\\n        if (raw.length == 0) {\\n            return CommonTypes.BigInt(hex\\\"00\\\", false);\\n        }\\n\\n        bytes memory val = new bytes(raw.length - 1);\\n        bool neg = false;\\n\\n        if (raw[0] == 0x01) {\\n            neg = true;\\n        }\\n\\n        for (uint i = 1; i < raw.length; i++) {\\n            val[i - 1] = raw[i];\\n        }\\n\\n        return CommonTypes.BigInt(val, neg);\\n    }\\n}\\n\",\"keccak256\":\"0xbe9eb7f33f943e12a2ca6d8a02178c30cef91f8c9db1c1b50f88a77e31784ac4\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/BytesCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for bytes\\n/// @author Zondax AG\\nlibrary BytesCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for bytes;\\n\\n    /// @notice serialize raw bytes as cbor bytes string encoded\\n    /// @param data raw data in bytes\\n    /// @return encoded cbor bytes\\n    function serializeBytes(bytes memory data) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(data);\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize raw address (in bytes) as cbor bytes string encoded (how an address is passed to filecoin actors)\\n    /// @param addr raw address in bytes\\n    /// @return encoded address as cbor bytes\\n    function serializeAddress(bytes memory addr) internal pure returns (bytes memory) {\\n        return serializeBytes(addr);\\n    }\\n\\n    /// @notice encoded null value as cbor\\n    /// @return cbor encoded null\\n    function serializeNull() internal pure returns (bytes memory) {\\n        CBOR.CBORBuffer memory buf = CBOR.create(1);\\n\\n        buf.writeNull();\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize cbor encoded filecoin address to bytes\\n    /// @param ret cbor encoded filecoin address\\n    /// @return raw bytes representing a filecoin address\\n    function deserializeAddress(bytes memory ret) internal pure returns (bytes memory) {\\n        bytes memory addr;\\n        uint byteIdx = 0;\\n\\n        (addr, byteIdx) = ret.readBytes(byteIdx);\\n\\n        return addr;\\n    }\\n\\n    /// @notice deserialize cbor encoded string\\n    /// @param ret cbor encoded string (in bytes)\\n    /// @return decoded string\\n    function deserializeString(bytes memory ret) internal pure returns (string memory) {\\n        string memory response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readString(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded bool\\n    /// @param ret cbor encoded bool (in bytes)\\n    /// @return decoded bool\\n    function deserializeBool(bytes memory ret) internal pure returns (bool) {\\n        bool response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readBool(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded BigInt\\n    /// @param ret cbor encoded BigInt (in bytes)\\n    /// @return decoded BigInt\\n    /// @dev BigInts are cbor encoded as bytes string first. That is why it unwraps the cbor encoded bytes first, and then parse the result into BigInt\\n    function deserializeBytesBigInt(bytes memory ret) internal pure returns (CommonTypes.BigInt memory) {\\n        bytes memory tmp;\\n        uint byteIdx = 0;\\n\\n        if (ret.length > 0) {\\n            (tmp, byteIdx) = ret.readBytes(byteIdx);\\n            if (tmp.length > 0) {\\n                return tmp.deserializeBigInt();\\n            }\\n        }\\n\\n        return CommonTypes.BigInt(new bytes(0), false);\\n    }\\n\\n    /// @notice deserialize cbor encoded uint64\\n    /// @param rawResp cbor encoded uint64 (in bytes)\\n    /// @return decoded uint64\\n    function deserializeUint64(bytes memory rawResp) internal pure returns (uint64) {\\n        uint byteIdx = 0;\\n        uint64 value;\\n\\n        (value, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return value;\\n    }\\n\\n    /// @notice deserialize cbor encoded int64\\n    /// @param rawResp cbor encoded int64 (in bytes)\\n    /// @return decoded int64\\n    function deserializeInt64(bytes memory rawResp) internal pure returns (int64) {\\n        uint byteIdx = 0;\\n        int64 value;\\n\\n        (value, byteIdx) = rawResp.readInt64(byteIdx);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x092be34452eead511a33e8d5c0a0878bf53ac5747ada8788099a81bdf888eccf\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/FilecoinCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for general data types on the filecoin network.\\n/// @author Zondax AG\\nlibrary FilecoinCBOR {\\n    using Buffer for Buffer.buffer;\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for *;\\n    using BigIntCBOR for *;\\n\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant TAG_TYPE_CID_CODE = 42;\\n    uint8 private constant PAYLOAD_LEN_8_BITS = 24;\\n\\n    /// @notice Write a CID into a CBOR buffer.\\n    /// @dev The CBOR major will be 6 (type 'tag') and the tag type value is 42, as per CBOR tag assignments.\\n    /// @dev https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\\n    /// @param buf buffer containing the actual CBOR serialization process\\n    /// @param value CID value to serialize as CBOR\\n    function writeCid(CBOR.CBORBuffer memory buf, bytes memory value) internal pure {\\n        buf.buf.appendUint8(uint8(((MAJOR_TYPE_TAG << 5) | PAYLOAD_LEN_8_BITS)));\\n        buf.buf.appendUint8(TAG_TYPE_CID_CODE);\\n        // See https://ipld.io/specs/codecs/dag-cbor/spec/#links for explanation on 0x00 prefix.\\n        buf.writeBytes(bytes.concat(hex'00', value));\\n    }\\n\\n    function readCid(bytes memory cborData, uint byteIdx) internal pure returns (CommonTypes.Cid memory, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = cborData.parseCborHeader(byteIdx);\\n        require(maj == MAJOR_TYPE_TAG, \\\"expected major type tag when parsing cid\\\");\\n        require(value == TAG_TYPE_CID_CODE, \\\"expected tag 42 when parsing cid\\\");\\n\\n        bytes memory raw;\\n        (raw, byteIdx) = cborData.readBytes(byteIdx);\\n        require(raw[0] == 0x00, \\\"expected first byte to be 0 when parsing cid\\\");\\n\\n        // Pop off the first byte, which corresponds to the historical multibase 0x00 byte.\\n        // https://ipld.io/specs/codecs/dag-cbor/spec/#links\\n        CommonTypes.Cid memory ret;\\n        ret.data = new bytes(raw.length - 1);\\n        for (uint256 i = 1; i < raw.length; i++) {\\n            ret.data[i-1] = raw[i];\\n        }\\n\\n        return (ret, byteIdx);\\n    }\\n\\n    /// @notice serialize filecoin address to cbor encoded\\n    /// @param addr filecoin address to serialize\\n    /// @return cbor serialized data as bytes\\n    function serializeAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a BigInt value wrapped in a cbor fixed array.\\n    /// @param value BigInt to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayBigInt(CommonTypes.BigInt memory value) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory valueBigInt = value.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(valueBigInt);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(value.serializeBigInt());\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a FilAddress value wrapped in a cbor fixed array.\\n    /// @param addr FilAddress to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayFilAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize a FilAddress wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of FilAddress created based on parsed data\\n    function deserializeArrayFilAddress(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 1, \\\"Wrong numbers of parameters (should find 1)\\\");\\n\\n        (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize a BigInt wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of BigInt created based on parsed data\\n    function deserializeArrayBigInt(bytes memory rawResp) internal pure returns (CommonTypes.BigInt memory) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        return tmp.deserializeBigInt();\\n    }\\n\\n    /// @notice serialize UniversalReceiverParams struct to cbor in order to pass as arguments to an actor\\n    /// @param params UniversalReceiverParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeUniversalReceiverParams(CommonTypes.UniversalReceiverParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getPrefixSize(params.type_);\\n        capacity += Misc.getBytesSize(params.payload);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeUInt64(params.type_);\\n        buf.writeBytes(params.payload);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize UniversalReceiverParams cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of UniversalReceiverParams created based on parsed data\\n    function deserializeUniversalReceiverParams(bytes memory rawResp) internal pure returns (CommonTypes.UniversalReceiverParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 2, \\\"Wrong numbers of parameters (should find 2)\\\");\\n\\n        (ret.type_, byteIdx) = rawResp.readUInt32(byteIdx);\\n        (ret.payload, byteIdx) = rawResp.readBytes(byteIdx);\\n    }\\n\\n    /// @notice attempt to read a FilActorId value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a FilActorId decoded from input bytes and the byte index after moving past the value\\n    function readFilActorId(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.FilActorId, uint) {\\n        uint64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return (CommonTypes.FilActorId.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write FilActorId into a cbor buffer\\n    /// @dev FilActorId is just wrapping a uint64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id FilActorId to serialize as cbor\\n    function writeFilActorId(CBOR.CBORBuffer memory buf, CommonTypes.FilActorId id) internal pure {\\n        buf.writeUInt64(CommonTypes.FilActorId.unwrap(id));\\n    }\\n\\n    /// @notice attempt to read a ChainEpoch value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a ChainEpoch decoded from input bytes and the byte index after moving past the value\\n    function readChainEpoch(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.ChainEpoch, uint) {\\n        int64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readInt64(byteIdx);\\n        return (CommonTypes.ChainEpoch.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write ChainEpoch into a cbor buffer\\n    /// @dev ChainEpoch is just wrapping a int64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id ChainEpoch to serialize as cbor\\n    function writeChainEpoch(CBOR.CBORBuffer memory buf, CommonTypes.ChainEpoch id) internal pure {\\n        buf.writeInt64(CommonTypes.ChainEpoch.unwrap(id));\\n    }\\n\\n    /// @notice write DealLabel into a cbor buffer\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param label DealLabel to serialize as cbor\\n    function writeDealLabel(CBOR.CBORBuffer memory buf, CommonTypes.DealLabel memory label) internal pure {\\n        label.isString ? buf.writeString(string(label.data)) : buf.writeBytes(label.data);\\n    }\\n\\n    /// @notice deserialize DealLabel cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of DealLabel created based on parsed data\\n    function deserializeDealLabel(bytes memory rawResp) internal pure returns (CommonTypes.DealLabel memory) {\\n        uint byteIdx = 0;\\n        CommonTypes.DealLabel memory label;\\n\\n        (label, byteIdx) = readDealLabel(rawResp, byteIdx);\\n        return label;\\n    }\\n\\n    /// @notice attempt to read a DealLabel value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a DealLabel decoded from input bytes and the byte index after moving past the value\\n    function readDealLabel(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.DealLabel memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = CBORDecoder.parseCborHeader(rawResp, byteIdx);\\n        require(maj == MajByteString || maj == MajTextString, \\\"invalid maj (expected MajByteString or MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = rawResp[i];\\n            slice_index++;\\n        }\\n\\n        return (CommonTypes.DealLabel(slice, maj == MajTextString), byteIdx + len);\\n    }\\n}\\n\",\"keccak256\":\"0x9c73c2969df5325f1f86c401b05b8983e633e8bd21c1c72b2b9039a731174098\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/MinerCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\nimport \\\"./FilecoinCbor.sol\\\";\\n\\nimport \\\"../types/MinerTypes.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Miner actor exported methods.\\n/// @author Zondax AG\\nlibrary MinerCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice serialize ChangeBeneficiaryParams struct to cbor in order to pass as arguments to the miner actor\\n    /// @param params ChangeBeneficiaryParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeChangeBeneficiaryParams(MinerTypes.ChangeBeneficiaryParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory new_quota = params.new_quota.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(3);\\n        capacity += Misc.getBytesSize(params.new_beneficiary.data);\\n        capacity += Misc.getBytesSize(new_quota);\\n        capacity += Misc.getChainEpochSize(params.new_expiration);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(3);\\n        buf.writeBytes(params.new_beneficiary.data);\\n        buf.writeBytes(new_quota);\\n        buf.writeChainEpoch(params.new_expiration);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetOwnerReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetOwnerReturn created based on parsed data\\n    function deserializeGetOwnerReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetOwnerReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.owner.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        if (!rawResp.isNullNext(byteIdx)) {\\n            (ret.proposed.data, byteIdx) = rawResp.readBytes(byteIdx);\\n        } else {\\n            ret.proposed.data = new bytes(0);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetBeneficiaryReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetBeneficiaryReturn created based on parsed data\\n    function deserializeGetBeneficiaryReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetBeneficiaryReturn memory ret) {\\n        bytes memory tmp;\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.active.beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 3);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        if (tmp.length > 0) {\\n            ret.active.term.quota = tmp.deserializeBigInt();\\n        } else {\\n            ret.active.term.quota = CommonTypes.BigInt(new bytes(0), false);\\n        }\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        if (tmp.length > 0) {\\n            ret.active.term.used_quota = tmp.deserializeBigInt();\\n        } else {\\n            ret.active.term.used_quota = CommonTypes.BigInt(new bytes(0), false);\\n        }\\n\\n        (ret.active.term.expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        if (!rawResp.isNullNext(byteIdx)) {\\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(len == 5);\\n\\n            (ret.proposed.new_beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n            if (tmp.length > 0) {\\n                ret.proposed.new_quota = tmp.deserializeBigInt();\\n            } else {\\n                ret.proposed.new_quota = CommonTypes.BigInt(new bytes(0), false);\\n            }\\n\\n            (ret.proposed.new_expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n            (ret.proposed.approved_by_beneficiary, byteIdx) = rawResp.readBool(byteIdx);\\n            (ret.proposed.approved_by_nominee, byteIdx) = rawResp.readBool(byteIdx);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetVestingFundsReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetVestingFundsReturn created based on parsed data\\n    function deserializeGetVestingFundsReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetVestingFundsReturn memory ret) {\\n        CommonTypes.ChainEpoch epoch;\\n        CommonTypes.BigInt memory amount;\\n        bytes memory tmp;\\n\\n        uint byteIdx = 0;\\n        uint len;\\n        uint leni;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.vesting_funds = new MinerTypes.VestingFunds[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (leni, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(leni == 2);\\n\\n            (epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n            amount = tmp.deserializeBigInt();\\n            ret.vesting_funds[i] = MinerTypes.VestingFunds(epoch, amount);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize ChangeWorkerAddressParams struct to cbor in order to pass as arguments to the miner actor\\n    /// @param params ChangeWorkerAddressParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeChangeWorkerAddressParams(MinerTypes.ChangeWorkerAddressParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getBytesSize(params.new_worker.data);\\n        capacity += Misc.getPrefixSize(uint256(params.new_control_addresses.length));\\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\\n            capacity += Misc.getBytesSize(params.new_control_addresses[i].data);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeBytes(params.new_worker.data);\\n        buf.startFixedArray(uint64(params.new_control_addresses.length));\\n\\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\\n            buf.writeBytes(params.new_control_addresses[i].data);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize ChangeMultiaddrsParams struct to cbor in order to pass as arguments to the miner actor\\n    /// @param params ChangeMultiaddrsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeChangeMultiaddrsParams(MinerTypes.ChangeMultiaddrsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getPrefixSize(uint256(params.new_multi_addrs.length));\\n        for (uint64 i = 0; i < params.new_multi_addrs.length; i++) {\\n            capacity += Misc.getBytesSize(params.new_multi_addrs[i].data);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.startFixedArray(uint64(params.new_multi_addrs.length));\\n\\n        for (uint64 i = 0; i < params.new_multi_addrs.length; i++) {\\n            buf.writeBytes(params.new_multi_addrs[i].data);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetMultiaddrsReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetMultiaddrsReturn created based on parsed data\\n    function deserializeGetMultiaddrsReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetMultiaddrsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.multi_addrs = new CommonTypes.FilAddress[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (ret.multi_addrs[i].data, byteIdx) = rawResp.readBytes(byteIdx);\\n        }\\n\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0x8893ec187418e90131eedce500b721c7195d2f7cef24643910c85f9000a211b3\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    uint constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\",\"keccak256\":\"0x619be2505ceb368047c76fc4afc932a8b587d1cebbdd8f813dcbe22c771d66dd\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/MinerTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin miner actor types for Solidity.\\n/// @author Zondax AG\\nlibrary MinerTypes {\\n    uint constant GetOwnerMethodNum = 3275365574;\\n    uint constant ChangeOwnerAddressMethodNum = 1010589339;\\n    uint constant IsControllingAddressMethodNum = 348244887;\\n    uint constant GetSectorSizeMethodNum = 3858292296;\\n    uint constant GetAvailableBalanceMethodNum = 4026106874;\\n    uint constant GetVestingFundsMethodNum = 1726876304;\\n    uint constant ChangeBeneficiaryMethodNum = 1570634796;\\n    uint constant GetBeneficiaryMethodNum = 4158972569;\\n    uint constant ChangeWorkerAddressMethodNum = 3302309124;\\n    uint constant ChangePeerIDMethodNum = 1236548004;\\n    uint constant ChangeMultiaddrsMethodNum = 1063480576;\\n    uint constant RepayDebtMethodNum = 3665352697;\\n    uint constant ConfirmChangeWorkerAddressMethodNum = 2354970453;\\n    uint constant GetPeerIDMethodNum = 2812875329;\\n    uint constant GetMultiaddrsMethodNum = 1332909407;\\n    uint constant WithdrawBalanceMethodNum = 2280458852;\\n\\n    /// @param owner owner address.\\n    /// @param proposed owner address.\\n    struct GetOwnerReturn {\\n        CommonTypes.FilAddress owner;\\n        CommonTypes.FilAddress proposed;\\n    }\\n\\n    /// @param vesting_funds funds\\n    struct GetVestingFundsReturn {\\n        VestingFunds[] vesting_funds;\\n    }\\n\\n    /// @param new_beneficiary the new beneficiary address.\\n    /// @param new_quota the new quota token amount.\\n    /// @param new_expiration the epoch that the new quota will be expired.\\n    struct ChangeBeneficiaryParams {\\n        CommonTypes.FilAddress new_beneficiary;\\n        CommonTypes.BigInt new_quota;\\n        CommonTypes.ChainEpoch new_expiration;\\n    }\\n\\n    /// @param active current active beneficiary.\\n    /// @param proposed the proposed and pending beneficiary.\\n    struct GetBeneficiaryReturn {\\n        ActiveBeneficiary active;\\n        PendingBeneficiaryChange proposed;\\n    }\\n\\n    /// @param new_worker the new worker address.\\n    /// @param new_control_addresses the new controller addresses.\\n    struct ChangeWorkerAddressParams {\\n        CommonTypes.FilAddress new_worker;\\n        CommonTypes.FilAddress[] new_control_addresses;\\n    }\\n\\n    /// @param new_multi_addrs the new multi-signature address.\\n    struct ChangeMultiaddrsParams {\\n        CommonTypes.FilAddress[] new_multi_addrs;\\n    }\\n\\n    /// @param multi_addrs the multi-signature address.\\n    struct GetMultiaddrsReturn {\\n        CommonTypes.FilAddress[] multi_addrs;\\n    }\\n\\n    /// @param epoch the epoch of funds vested.\\n    /// @param amount the amount of funds vested.\\n    struct VestingFunds {\\n        CommonTypes.ChainEpoch epoch;\\n        CommonTypes.BigInt amount;\\n    }\\n\\n    /// @param quota the quota token amount.\\n    /// @param used_quota the used quota token amount.\\n    /// @param expiration the epoch that the quota will be expired.\\n    struct BeneficiaryTerm {\\n        CommonTypes.BigInt quota;\\n        CommonTypes.BigInt used_quota;\\n        CommonTypes.ChainEpoch expiration;\\n    }\\n\\n    /// @param beneficiary the address of the beneficiary.\\n    /// @param term BeneficiaryTerm\\n    struct ActiveBeneficiary {\\n        CommonTypes.FilAddress beneficiary;\\n        BeneficiaryTerm term;\\n    }\\n\\n    /// @param new_beneficiary the new beneficiary address.\\n    /// @param new_quota the new quota token amount.\\n    /// @param new_expiration the epoch that the new quota will be expired.\\n    /// @param approved_by_beneficiary if this proposal is approved by beneficiary or not.\\n    /// @param approved_by_nominee if this proposal is approved by nominee or not.\\n    struct PendingBeneficiaryChange {\\n        CommonTypes.FilAddress new_beneficiary;\\n        CommonTypes.BigInt new_quota;\\n        CommonTypes.ChainEpoch new_expiration;\\n        bool approved_by_beneficiary;\\n        bool approved_by_nominee;\\n    }\\n\\n    enum SectorSize {\\n        _2KiB,\\n        _8MiB,\\n        _512MiB,\\n        _32GiB,\\n        _64GiB\\n    }\\n}\\n\",\"keccak256\":\"0x6d7839a173dc3b84142cb3ea3a834148e57a89ad3d15383c26b6036461145e72\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Actor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a delegate_call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        if (exit != 0) {\\n            revert ActorError(exit);\\n        }\\n\\n        return return_value;\\n    }\\n}\\n\",\"keccak256\":\"0xd10195c1f9239cca767515b3bdffe3dce1db3950788c3bc470a48c2012c2cc4b\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/BigInts.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@zondax/solidity-bignumber/src/BigNumbers.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary BigInts {\\n    uint256 constant MAX_UINT = (2 ** 256) - 1;\\n    uint256 constant MAX_INT = ((2 ** 256) / 2) - 1;\\n\\n    error NegativeValueNotAllowed();\\n\\n    /// @notice allow to get a BigInt from a uint256 value\\n    /// @param value uint256 number\\n    /// @return new BigInt\\n    function fromUint256(uint256 value) internal view returns (CommonTypes.BigInt memory) {\\n        BigNumber memory bigNum = BigNumbers.init(value, false);\\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\\n    }\\n\\n    /// @notice allow to get a BigInt from a int256 value\\n    /// @param value int256 number\\n    /// @return new BigInt\\n    function fromInt256(int256 value) internal view returns (CommonTypes.BigInt memory) {\\n        uint256 valueAbs = Misc.abs(value);\\n        BigNumber memory bigNum = BigNumbers.init(valueAbs, value < 0);\\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\\n    }\\n\\n    /// @notice allow to get a uint256 from a BigInt value.\\n    /// @notice If the value is negative, it will generate an error.\\n    /// @param value BigInt number\\n    /// @return a uint256 value and flog that indicates whether it was possible to convert or not (the value overflows uint256 type)\\n    function toUint256(CommonTypes.BigInt memory value) internal view returns (uint256, bool) {\\n        if (value.neg) {\\n            revert NegativeValueNotAllowed();\\n        }\\n\\n        BigNumber memory max = BigNumbers.init(MAX_UINT, false);\\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, value.neg);\\n        if (BigNumbers.gt(bigNumValue, max)) {\\n            return (0, true);\\n        }\\n\\n        return (uint256(bytes32(bigNumValue.val)), false);\\n    }\\n\\n    /// @notice allow to get a int256 from a BigInt value.\\n    /// @notice If the value is grater than what a int256 can store, it will generate an error.\\n    /// @param value BigInt number\\n    /// @return a int256 value and flog that indicates whether it was possible to convert or not (the value overflows int256 type)\\n    function toInt256(CommonTypes.BigInt memory value) internal view returns (int256, bool) {\\n        BigNumber memory max = BigNumbers.init(MAX_INT, false);\\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, false);\\n        if (BigNumbers.gt(bigNumValue, max)) {\\n            return (0, true);\\n        }\\n\\n        int256 parsedValue = int256(uint256(bytes32(bigNumValue.val)));\\n        return (value.neg ? -1 * parsedValue : parsedValue, false);\\n    }\\n}\\n\",\"keccak256\":\"0x1dff7b0421b352b8430b829065aa816e07cbb8efef76d930a6dba4cf16039a42\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/CborDecode.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// \\tMajUnsignedInt = 0\\n// \\tMajSignedInt   = 1\\n// \\tMajByteString  = 2\\n// \\tMajTextString  = 3\\n// \\tMajArray       = 4\\n// \\tMajMap         = 5\\n// \\tMajTag         = 6\\n// \\tMajOther       = 7\\n\\nuint8 constant MajUnsignedInt = 0;\\nuint8 constant MajSignedInt = 1;\\nuint8 constant MajByteString = 2;\\nuint8 constant MajTextString = 3;\\nuint8 constant MajArray = 4;\\nuint8 constant MajMap = 5;\\nuint8 constant MajTag = 6;\\nuint8 constant MajOther = 7;\\n\\nuint8 constant TagTypeBigNum = 2;\\nuint8 constant TagTypeNegativeBigNum = 3;\\n\\nuint8 constant True_Type = 21;\\nuint8 constant False_Type = 20;\\n\\n/// @notice This library is a set a functions that allows anyone to decode cbor encoded bytes\\n/// @dev methods in this library try to read the data type indicated from cbor encoded data stored in bytes at a specific index\\n/// @dev if it successes, methods will return the read value and the new index (intial index plus read bytes)\\n/// @author Zondax AG\\nlibrary CBORDecoder {\\n    /// @notice check if next value on the cbor encoded data is null\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    function isNullNext(bytes memory cborData, uint byteIdx) internal pure returns (bool) {\\n        return cborData[byteIdx] == hex\\\"f6\\\";\\n    }\\n\\n    /// @notice attempt to read a bool value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bool decoded from input bytes and the byte index after moving past the value\\n    function readBool(bytes memory cborData, uint byteIdx) internal pure returns (bool, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajOther, \\\"invalid maj (expected MajOther)\\\");\\n        assert(value == True_Type || value == False_Type);\\n\\n        return (value != False_Type, byteIdx);\\n    }\\n\\n    /// @notice attempt to read the length of a fixed array\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return length of the fixed array decoded from input bytes and the byte index after moving past the value\\n    function readFixedArray(bytes memory cborData, uint byteIdx) internal pure returns (uint, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajArray, \\\"invalid maj (expected MajArray)\\\");\\n\\n        return (len, byteIdx);\\n    }\\n\\n    /// @notice attempt to read an arbitrary length string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary length string decoded from input bytes and the byte index after moving past the value\\n    function readString(bytes memory cborData, uint byteIdx) internal pure returns (string memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTextString, \\\"invalid maj (expected MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (string(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read an arbitrary byte string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary byte string decoded from input bytes and the byte index after moving past the value\\n    function readBytes(bytes memory cborData, uint byteIdx) internal pure returns (bytes memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajByteString, \\\"invalid maj (expected MajTag or MajByteString)\\\");\\n\\n        if (maj == MajTag) {\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            assert(maj == MajByteString);\\n        }\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (slice, byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a bytes32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bytes32 decoded from input bytes and the byte index after moving past the value\\n    function readBytes32(bytes memory cborData, uint byteIdx) internal pure returns (bytes32, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(32);\\n        uint slice_index = 32 - len;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (bytes32(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a uint256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint256 decoded from input bytes and the byte index after moving past the value\\n    function readUInt256(bytes memory cborData, uint byteIdx) internal pure returns (uint256, uint) {\\n        uint8 maj;\\n        uint256 value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajUnsignedInt, \\\"invalid maj (expected MajTag or MajUnsignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            require(value == TagTypeBigNum, \\\"invalid tag (expected TagTypeBigNum)\\\");\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (value, byteIdx + len);\\n        }\\n\\n        return (value, byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int256 decoded from input bytes and the byte index after moving past the value\\n    function readInt256(bytes memory cborData, uint byteIdx) internal pure returns (int256, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajSignedInt, \\\"invalid maj (expected MajTag or MajSignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            assert(value == TagTypeNegativeBigNum);\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (int256(value), byteIdx + len);\\n        }\\n\\n        return (int256(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint64 decoded from input bytes and the byte index after moving past the value\\n    function readUInt64(bytes memory cborData, uint byteIdx) internal pure returns (uint64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint64(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint32 decoded from input bytes and the byte index after moving past the value\\n    function readUInt32(bytes memory cborData, uint byteIdx) internal pure returns (uint32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint32(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint16 decoded from input bytes and the byte index after moving past the value\\n    function readUInt16(bytes memory cborData, uint byteIdx) internal pure returns (uint16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint16(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint8 decoded from input bytes and the byte index after moving past the value\\n    function readUInt8(bytes memory cborData, uint byteIdx) internal pure returns (uint8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint8(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int64 decoded from input bytes and the byte index after moving past the value\\n    function readInt64(bytes memory cborData, uint byteIdx) internal pure returns (int64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int64(uint64(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int32 decoded from input bytes and the byte index after moving past the value\\n    function readInt32(bytes memory cborData, uint byteIdx) internal pure returns (int32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int32(uint32(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int16 decoded from input bytes and the byte index after moving past the value\\n    function readInt16(bytes memory cborData, uint byteIdx) internal pure returns (int16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int16(uint16(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int8 decoded from input bytes and the byte index after moving past the value\\n    function readInt8(bytes memory cborData, uint byteIdx) internal pure returns (int8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int8(uint8(value)), byteIdx);\\n    }\\n\\n    /// @notice slice uint8 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint8 sliced from bytes\\n    function sliceUInt8(bytes memory bs, uint start) internal pure returns (uint8) {\\n        require(bs.length >= start + 1, \\\"slicing out of range\\\");\\n        return uint8(bs[start]);\\n    }\\n\\n    /// @notice slice uint16 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint16 sliced from bytes\\n    function sliceUInt16(bytes memory bs, uint start) internal pure returns (uint16) {\\n        require(bs.length >= start + 2, \\\"slicing out of range\\\");\\n        bytes2 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint16(x);\\n    }\\n\\n    /// @notice slice uint32 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint32 sliced from bytes\\n    function sliceUInt32(bytes memory bs, uint start) internal pure returns (uint32) {\\n        require(bs.length >= start + 4, \\\"slicing out of range\\\");\\n        bytes4 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint32(x);\\n    }\\n\\n    /// @notice slice uint64 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint64 sliced from bytes\\n    function sliceUInt64(bytes memory bs, uint start) internal pure returns (uint64) {\\n        require(bs.length >= start + 8, \\\"slicing out of range\\\");\\n        bytes8 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint64(x);\\n    }\\n\\n    /// @notice Parse cbor header for major type and extra info.\\n    /// @param cbor cbor encoded bytes to parse from\\n    /// @param byteIndex current position to read on the cbor encoded bytes\\n    /// @return major type, extra info and the byte index after moving past header bytes\\n    function parseCborHeader(bytes memory cbor, uint byteIndex) internal pure returns (uint8, uint64, uint) {\\n        uint8 first = sliceUInt8(cbor, byteIndex);\\n        byteIndex += 1;\\n        uint8 maj = (first & 0xe0) >> 5;\\n        uint8 low = first & 0x1f;\\n        // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\\n        require(low < 28, \\\"cannot handle headers with extra > 27\\\");\\n\\n        // extra is lower bits\\n        if (low < 24) {\\n            return (maj, low, byteIndex);\\n        }\\n\\n        // extra in next byte\\n        if (low == 24) {\\n            uint8 next = sliceUInt8(cbor, byteIndex);\\n            byteIndex += 1;\\n            require(next >= 24, \\\"invalid cbor\\\"); // otherwise this is invalid cbor\\n            return (maj, next, byteIndex);\\n        }\\n\\n        // extra in next 2 bytes\\n        if (low == 25) {\\n            uint16 extra16 = sliceUInt16(cbor, byteIndex);\\n            byteIndex += 2;\\n            return (maj, extra16, byteIndex);\\n        }\\n\\n        // extra in next 4 bytes\\n        if (low == 26) {\\n            uint32 extra32 = sliceUInt32(cbor, byteIndex);\\n            byteIndex += 4;\\n            return (maj, extra32, byteIndex);\\n        }\\n\\n        // extra in next 8 bytes\\n        assert(low == 27);\\n        uint64 extra64 = sliceUInt64(cbor, byteIndex);\\n        byteIndex += 8;\\n        return (maj, extra64, byteIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x3babe3c71558c21f0bef9de09088c42b8b148d16d856f84a350b9c43b4da6018\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Leb128.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary FilAddresses {\\n    using Buffer for Buffer.buffer;\\n\\n    error InvalidAddress();\\n\\n    /// @notice allow to get a FilAddress from an eth address\\n    /// @param addr eth address to convert\\n    /// @return new filecoin address\\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"040a\\\", addr));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from an actorID\\n    /// @param actorID uint64 actorID\\n    /// @return address filecoin address\\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"00\\\", result.buf));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from bytes\\n    /// @param data address in bytes format\\n    /// @return filecoin address\\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\\n        if (!validate(newAddr)) {\\n            revert InvalidAddress();\\n        }\\n\\n        return newAddr;\\n    }\\n\\n    /// @notice allow to validate if an address is valid or not\\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\\n    /// @param addr the filecoin address to validate\\n    /// @return whether the address is valid or not\\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\\n        if (addr.data[0] == 0x00) {\\n            return addr.data.length <= 10;\\n        } else if (addr.data[0] == 0x01 || addr.data[0] == 0x02) {\\n            return addr.data.length == 21;\\n        } else if (addr.data[0] == 0x03) {\\n            return addr.data.length == 49;\\n        } else if (addr.data[0] == 0x04) {\\n            return addr.data.length <= 64;\\n        }\\n\\n        return addr.data.length <= 256;\\n    }\\n}\\n\",\"keccak256\":\"0x3ca8652660af7a3ff1b894b7c8a875645999b561499e960198dfe330d39ce387\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Leb128.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library implement the leb128\\n/// @author Zondax AG\\nlibrary Leb128 {\\n    using Buffer for Buffer.buffer;\\n\\n    /// @notice encode a unsigned integer 64bits into bytes\\n    /// @param value the actor ID to encode\\n    /// @return result return the value in bytes\\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\\n        while (true) {\\n            uint64 byte_ = value & 0x7f;\\n            value >>= 7;\\n            if (value == 0) {\\n                result.appendUint8(uint8(byte_));\\n                return result;\\n            }\\n            result.appendUint8(uint8(byte_ | 0x80));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1f4d71cdc933b0c2ac8eb81d711bf63457ed8e79b748ca9f826d40a3b4f143b\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Misc.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\",\"keccak256\":\"0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4\",\"license\":\"Apache-2.0\"},\"@zondax/solidity-bignumber/src/BigNumbers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// Definition here allows both the lib and inheriting contracts to use BigNumber directly.\\nstruct BigNumber { \\n    bytes val;\\n    bool neg;\\n    uint bitlen;\\n}\\n\\n/**\\n * @notice BigNumbers library for Solidity.\\n */\\nlibrary BigNumbers {\\n    \\n    /// @notice the value for number 0 of a BigNumber instance.\\n    bytes constant ZERO = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n    /// @notice the value for number 1 of a BigNumber instance.\\n    bytes constant  ONE = hex\\\"0000000000000000000000000000000000000000000000000000000000000001\\\";\\n    /// @notice the value for number 2 of a BigNumber instance.\\n    bytes constant  TWO = hex\\\"0000000000000000000000000000000000000000000000000000000000000002\\\";\\n\\n    // ***************** BEGIN EXPOSED MANAGEMENT FUNCTIONS ******************\\n    /** @notice verify a BN instance\\n     *  @dev checks if the BN is in the correct format. operations should only be carried out on\\n     *       verified BNs, so it is necessary to call this if your function takes an arbitrary BN\\n     *       as input.\\n     *\\n     *  @param bn BigNumber instance\\n     */\\n    function verify(\\n        BigNumber memory bn\\n    ) internal pure {\\n        uint msword; \\n        bytes memory val = bn.val;\\n        assembly {msword := mload(add(val,0x20))} //get msword of result\\n        if(msword==0) require(isZero(bn));\\n        else require((bn.val.length % 32 == 0) && (msword>>((bn.bitlen%256)-1)==1));\\n    }\\n\\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from bytes value.\\n     *       Allows passing bitLength of value. This is NOT verified in the internal function. Only use where bitlen is\\n     *       explicitly known; otherwise use the other init function.\\n     *\\n     *  @param val BN value. may be of any size.\\n     *  @param neg neg whether the BN is +/-\\n     *  @param bitlen bit length of output.\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        bytes memory val, \\n        bool neg, \\n        uint bitlen\\n    ) internal view returns(BigNumber memory){\\n        return _init(val, neg, bitlen);\\n    }\\n    \\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from bytes value.\\n     *\\n     *  @param val BN value. may be of any size.\\n     *  @param neg neg whether the BN is +/-\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        bytes memory val, \\n        bool neg\\n    ) internal view returns(BigNumber memory){\\n        return _init(val, neg, 0);\\n    }\\n\\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from uint value (converts to bytes); \\n     *       tf. resulting BN is in the range -2^256-1 ... 2^256-1.\\n     *\\n     *  @param val uint value.\\n     *  @param neg neg whether the BN is +/-\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        uint val, \\n        bool neg\\n    ) internal view returns(BigNumber memory){\\n        return _init(abi.encodePacked(val), neg, 0);\\n    }\\n    // ***************** END EXPOSED MANAGEMENT FUNCTIONS ******************\\n\\n\\n\\n\\n    // ***************** BEGIN EXPOSED CORE CALCULATION FUNCTIONS ******************\\n    /** @notice BigNumber addition: a + b.\\n      * @dev add: Initially prepare BigNumbers for addition operation; internally calls actual addition/subtraction,\\n      *           depending on inputs.\\n      *           In order to do correct addition or subtraction we have to handle the sign.\\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result  - addition of a and b.\\n      */\\n    function add(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(BigNumber memory r) {\\n        if(a.bitlen==0 && b.bitlen==0) return zero();\\n        if(a.bitlen==0) return b;\\n        if(b.bitlen==0) return a;\\n        bytes memory val;\\n        uint bitlen;\\n        int compare = cmp(a,b,false);\\n\\n        if(a.neg || b.neg){\\n            if(a.neg && b.neg){\\n                if(compare>=0) (val, bitlen) = _add(a.val,b.val,a.bitlen);\\n                else (val, bitlen) = _add(b.val,a.val,b.bitlen);\\n                r.neg = true;\\n            }\\n            else {\\n                if(compare==1){\\n                    (val, bitlen) = _sub(a.val,b.val);\\n                    r.neg = a.neg;\\n                }\\n                else if(compare==-1){\\n                    (val, bitlen) = _sub(b.val,a.val);\\n                    r.neg = !a.neg;\\n                }\\n                else return zero();//one pos and one neg, and same value.\\n            }\\n        }\\n        else{\\n            if(compare>=0){ // a>=b\\n                (val, bitlen) = _add(a.val,b.val,a.bitlen);\\n            }\\n            else {\\n                (val, bitlen) = _add(b.val,a.val,b.bitlen);\\n            }\\n            r.neg = false;\\n        }\\n\\n        r.val = val;\\n        r.bitlen = (bitlen);\\n    }\\n\\n    /** @notice BigNumber subtraction: a - b.\\n      * @dev sub: Initially prepare BigNumbers for subtraction operation; internally calls actual addition/subtraction,\\n                  depending on inputs.\\n      *           In order to do correct addition or subtraction we have to handle the sign.\\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result - subtraction of a and b.\\n      */  \\n    function sub(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(BigNumber memory r) {\\n        if(a.bitlen==0 && b.bitlen==0) return zero();\\n        bytes memory val;\\n        int compare;\\n        uint bitlen;\\n        compare = cmp(a,b,false);\\n        if(a.neg || b.neg) {\\n            if(a.neg && b.neg){           \\n                if(compare == 1) { \\n                    (val,bitlen) = _sub(a.val,b.val); \\n                    r.neg = true;\\n                }\\n                else if(compare == -1) { \\n\\n                    (val,bitlen) = _sub(b.val,a.val); \\n                    r.neg = false;\\n                }\\n                else return zero();\\n            }\\n            else {\\n                if(compare >= 0) (val,bitlen) = _add(a.val,b.val,a.bitlen);\\n                else (val,bitlen) = _add(b.val,a.val,b.bitlen);\\n                \\n                r.neg = (a.neg) ? true : false;\\n            }\\n        }\\n        else {\\n            if(compare == 1) {\\n                (val,bitlen) = _sub(a.val,b.val);\\n                r.neg = false;\\n             }\\n            else if(compare == -1) { \\n                (val,bitlen) = _sub(b.val,a.val);\\n                r.neg = true;\\n            }\\n            else return zero(); \\n        }\\n        \\n        r.val = val;\\n        r.bitlen = (bitlen);\\n    }\\n\\n    /** @notice BigNumber multiplication: a * b.\\n      * @dev mul: takes two BigNumbers and multiplys them. Order is irrelevant.\\n      *              multiplication achieved using modexp precompile:\\n      *                 (a * b) = ((a + b)**2 - (a - b)**2) / 4\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result - multiplication of a and b.\\n      */\\n    function mul(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal view returns(BigNumber memory r){\\n            \\n        BigNumber memory lhs = add(a,b);\\n        BigNumber memory fst = modexp(lhs, two(), _powModulus(lhs, 2)); // (a+b)^2\\n        \\n        // no need to do subtraction part of the equation if a == b; if so, it has no effect on final result.\\n        if(!eq(a,b)) {\\n            BigNumber memory rhs = sub(a,b);\\n            BigNumber memory snd = modexp(rhs, two(), _powModulus(rhs, 2)); // (a-b)^2\\n            r = _shr(sub(fst, snd) , 2); // (a * b) = (((a + b)**2 - (a - b)**2) / 4\\n        }\\n        else {\\n            r = _shr(fst, 2); // a==b ? (((a + b)**2 / 4\\n        }\\n    }\\n\\n    /** @notice BigNumber division verification: a * b.\\n      * @dev div: takes three BigNumbers (a,b and result), and verifies that a/b == result.\\n      * Performing BigNumber division on-chain is a significantly expensive operation. As a result, \\n      * we expose the ability to verify the result of a division operation, which is a constant time operation. \\n      *              (a/b = result) == (a = b * result)\\n      *              Integer division only; therefore:\\n      *                verify ((b*result) + (a % (b*result))) == a.\\n      *              eg. 17/7 == 2:\\n      *                verify  (7*2) + (17 % (7*2)) == 17.\\n      * The function returns a bool on successful verification. The require statements will ensure that false can never\\n      *  be returned, however inheriting contracts may also want to put this function inside a require statement.\\n      *  \\n      * @param a first BigNumber\\n      * @param b second BigNumber\\n      * @param r result BigNumber\\n      * @return bool whether or not the operation was verified\\n      */\\n    function divVerify(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        BigNumber memory r\\n    ) internal view returns(bool) {\\n\\n        // first do zero check.\\n        // if a<b (always zero) and r==zero (input check), return true.\\n        if(cmp(a, b, false) == -1){\\n            require(cmp(zero(), r, false)==0);\\n            return true;\\n        }\\n\\n        // Following zero check:\\n        //if both negative: result positive\\n        //if one negative: result negative\\n        //if neither negative: result positive\\n        bool positiveResult = ( a.neg && b.neg ) || (!a.neg && !b.neg);\\n        require(positiveResult ? !r.neg : r.neg);\\n        \\n        // require denominator to not be zero.\\n        require(!(cmp(b,zero(),true)==0));\\n        \\n        // division result check assumes inputs are positive.\\n        // we have already checked for result sign so this is safe.\\n        bool[3] memory negs = [a.neg, b.neg, r.neg];\\n        a.neg = false;\\n        b.neg = false;\\n        r.neg = false;\\n\\n        // do multiplication (b * r)\\n        BigNumber memory fst = mul(b,r);\\n        // check if we already have 'a' (ie. no remainder after division). if so, no mod necessary, and return true.\\n        if(cmp(fst,a,true)==0) return true;\\n        //a mod (b*r)\\n        BigNumber memory snd = modexp(a,one(),fst); \\n        // ((b*r) + a % (b*r)) == a\\n        require(cmp(add(fst,snd),a,true)==0); \\n\\n        a.neg = negs[0];\\n        b.neg = negs[1];\\n        r.neg = negs[2];\\n\\n        return true;\\n    }\\n\\n    /** @notice BigNumber exponentiation: a ^ b.\\n      * @dev pow: takes a BigNumber and a uint (a,e), and calculates a^e.\\n      * modexp precompile is used to achieve a^e; for this is work, we need to work out the minimum modulus value \\n      * such that the modulus passed to modexp is not used. the result of a^e can never be more than size bitlen(a) * e.\\n      * \\n      * @param a BigNumber\\n      * @param e exponent\\n      * @return r result BigNumber\\n      */\\n    function pow(\\n        BigNumber memory a, \\n        uint e\\n    ) internal view returns(BigNumber memory){\\n        return modexp(a, init(e, false), _powModulus(a, e));\\n    }\\n\\n    /** @notice BigNumber modulus: a % n.\\n      * @dev mod: takes a BigNumber and modulus BigNumber (a,n), and calculates a % n.\\n      * modexp precompile is used to achieve a % n; an exponent of value '1' is passed.\\n      * @param a BigNumber\\n      * @param n modulus BigNumber\\n      * @return r result BigNumber\\n      */\\n    function mod(\\n        BigNumber memory a, \\n        BigNumber memory n\\n    ) internal view returns(BigNumber memory){\\n      return modexp(a,one(),n);\\n    }\\n\\n    /** @notice BigNumber modular exponentiation: a^e mod n.\\n      * @dev modexp: takes base, exponent, and modulus, internally computes base^exponent % modulus using the precompile at address 0x5, and creates new BigNumber.\\n      *              this function is overloaded: it assumes the exponent is positive. if not, the other method is used, whereby the inverse of the base is also passed.\\n      *\\n      * @param a base BigNumber\\n      * @param e exponent BigNumber\\n      * @param n modulus BigNumber\\n      * @return result BigNumber\\n      */    \\n    function modexp(\\n        BigNumber memory a, \\n        BigNumber memory e, \\n        BigNumber memory n\\n    ) internal view returns(BigNumber memory) {\\n        //if exponent is negative, other method with this same name should be used.\\n        //if modulus is negative or zero, we cannot perform the operation.\\n        require(  e.neg==false\\n                && n.neg==false\\n                && !isZero(n.val));\\n\\n        bytes memory _result = _modexp(a.val,e.val,n.val);\\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\\n        uint bitlen = bitLength(_result);\\n        \\n        // if result is 0, immediately return.\\n        if(bitlen == 0) return zero();\\n        // if base is negative AND exponent is odd, base^exp is negative, and tf. result is negative;\\n        // in that case we make the result positive by adding the modulus.\\n        if(a.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\\n        // in any other case we return the positive result.\\n        return BigNumber(_result, false, bitlen);\\n    }\\n\\n    /** @notice BigNumber modular exponentiation with negative base: inv(a)==a_inv && a_inv^e mod n.\\n    /** @dev modexp: takes base, base inverse, exponent, and modulus, asserts inverse(base)==base inverse, \\n      *              internally computes base_inverse^exponent % modulus and creates new BigNumber.\\n      *              this function is overloaded: it assumes the exponent is negative. \\n      *              if not, the other method is used, where the inverse of the base is not passed.\\n      *\\n      * @param a base BigNumber\\n      * @param ai base inverse BigNumber\\n      * @param e exponent BigNumber\\n      * @param a modulus\\n      * @return BigNumber memory result.\\n      */ \\n    function modexp(\\n        BigNumber memory a, \\n        BigNumber memory ai, \\n        BigNumber memory e, \\n        BigNumber memory n) \\n    internal view returns(BigNumber memory) {\\n        // base^-exp = (base^-1)^exp\\n        require(!a.neg && e.neg);\\n\\n        //if modulus is negative or zero, we cannot perform the operation.\\n        require(!n.neg && !isZero(n.val));\\n\\n        //base_inverse == inverse(base, modulus)\\n        require(modinvVerify(a, n, ai)); \\n            \\n        bytes memory _result = _modexp(ai.val,e.val,n.val);\\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\\n        uint bitlen = bitLength(_result);\\n\\n        // if result is 0, immediately return.\\n        if(bitlen == 0) return zero();\\n        // if base_inverse is negative AND exponent is odd, base_inverse^exp is negative, and tf. result is negative;\\n        // in that case we make the result positive by adding the modulus.\\n        if(ai.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\\n        // in any other case we return the positive result.\\n        return BigNumber(_result, false, bitlen);\\n    }\\n \\n    /** @notice modular multiplication: (a*b) % n.\\n      * @dev modmul: Takes BigNumbers for a, b, and modulus, and computes (a*b) % modulus\\n      *              We call mul for the two input values, before calling modexp, passing exponent as 1.\\n      *              Sign is taken care of in sub-functions.\\n      *\\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @param n Modulus BigNumber\\n      * @return result BigNumber\\n      */\\n    function modmul(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        BigNumber memory n) internal view returns(BigNumber memory) {       \\n        return mod(mul(a,b), n);       \\n    }\\n\\n    /** @notice modular inverse verification: Verifies that (a*r) % n == 1.\\n      * @dev modinvVerify: Takes BigNumbers for base, modulus, and result, verifies (base*result)%modulus==1, and returns result.\\n      *              Similar to division, it's far cheaper to verify an inverse operation on-chain than it is to calculate it, so we allow the user to pass their own result.\\n      *\\n      * @param a base BigNumber\\n      * @param n modulus BigNumber\\n      * @param r result BigNumber\\n      * @return boolean result\\n      */\\n    function modinvVerify(\\n        BigNumber memory a, \\n        BigNumber memory n, \\n        BigNumber memory r\\n    ) internal view returns(bool) {\\n        require(!a.neg && !n.neg); //assert positivity of inputs.\\n        /*\\n         * the following proves:\\n         * - user result passed is correct for values base and modulus\\n         * - modular inverse exists for values base and modulus.\\n         * otherwise it fails.\\n         */        \\n        require(cmp(modmul(a, r, n),one(),true)==0);\\n        \\n        return true;\\n    }\\n    // ***************** END EXPOSED CORE CALCULATION FUNCTIONS ******************\\n\\n\\n\\n\\n    // ***************** START EXPOSED HELPER FUNCTIONS ******************\\n    /** @notice BigNumber odd number check\\n      * @dev isOdd: returns 1 if BigNumber value is an odd number and 0 otherwise.\\n      *              \\n      * @param a BigNumber\\n      * @return r Boolean result\\n      */  \\n    function isOdd(\\n        BigNumber memory a\\n    ) internal pure returns(bool r){\\n        assembly{\\n            let a_ptr := add(mload(a), mload(mload(a))) // go to least significant word\\n            r := mod(mload(a_ptr),2)                      // mod it with 2 (returns 0 or 1) \\n        }\\n    }\\n\\n    /** @notice BigNumber comparison\\n      * @dev cmp: Compares BigNumbers a and b. 'signed' parameter indiciates whether to consider the sign of the inputs.\\n      *           'trigger' is used to decide this - \\n      *              if both negative, invert the result; \\n      *              if both positive (or signed==false), trigger has no effect;\\n      *              if differing signs, we return immediately based on input.\\n      *           returns -1 on a<b, 0 on a==b, 1 on a>b.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @param signed whether to consider sign of inputs\\n      * @return int result\\n      */\\n    function cmp(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        bool signed\\n    ) internal pure returns(int){\\n        int trigger = 1;\\n        if(signed){\\n            if(a.neg && b.neg) trigger = -1;\\n            else if(a.neg==false && b.neg==true) return 1;\\n            else if(a.neg==true && b.neg==false) return -1;\\n        }\\n\\n        if(a.bitlen>b.bitlen) return    trigger;   // 1*trigger\\n        if(b.bitlen>a.bitlen) return -1*trigger;\\n\\n        uint a_ptr;\\n        uint b_ptr;\\n        uint a_word;\\n        uint b_word;\\n\\n        uint len = a.val.length; //bitlen is same so no need to check length.\\n\\n        assembly{\\n            a_ptr := add(mload(a),0x20) \\n            b_ptr := add(mload(b),0x20)\\n        }\\n\\n        for(uint i=0; i<len;i+=32){\\n            assembly{\\n                a_word := mload(add(a_ptr,i))\\n                b_word := mload(add(b_ptr,i))\\n            }\\n\\n            if(a_word>b_word) return    trigger; // 1*trigger\\n            if(b_word>a_word) return -1*trigger; \\n\\n        }\\n\\n        return 0; //same value.\\n    }\\n\\n    /** @notice BigNumber equality\\n      * @dev eq: returns true if a==b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function eq(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==0) ? true : false;\\n    }\\n\\n    /** @notice BigNumber greater than\\n      * @dev eq: returns true if a>b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function gt(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==1) ? true : false;\\n    }\\n\\n    /** @notice BigNumber greater than or equal to\\n      * @dev eq: returns true if a>=b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function gte(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==1 || result==0) ? true : false;\\n    }\\n\\n    /** @notice BigNumber less than\\n      * @dev eq: returns true if a<b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function lt(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==-1) ? true : false;\\n    }\\n\\n    /** @notice BigNumber less than or equal o\\n      * @dev eq: returns true if a<=b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function lte(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==-1 || result==0) ? true : false;\\n    }\\n\\n    /** @notice right shift BigNumber value\\n      * @dev shr: right shift BigNumber a by 'bits' bits.\\n             copies input value to new memory location before shift and calls _shr function after. \\n      * @param a BigNumber value to shift\\n      * @param bits amount of bits to shift by\\n      * @return result BigNumber\\n      */\\n    function shr(\\n        BigNumber memory a, \\n        uint bits\\n    ) internal view returns(BigNumber memory){\\n        require(!a.neg);\\n        return _shr(a, bits);\\n    }\\n\\n    /** @notice right shift BigNumber memory 'dividend' by 'bits' bits.\\n      * @dev _shr: Shifts input value in-place, ie. does not create new memory. shr function does this.\\n      * right shift does not necessarily have to copy into a new memory location. where the user wishes the modify\\n      * the existing value they have in place, they can use this.  \\n      * @param bn value to shift\\n      * @param bits amount of bits to shift by\\n      * @return r result\\n      */\\n    function _shr(BigNumber memory bn, uint bits) internal view returns(BigNumber memory){\\n        uint length;\\n        assembly { length := mload(mload(bn)) }\\n\\n        // if bits is >= the bitlength of the value the result is always 0\\n        if(bits >= bn.bitlen) return BigNumber(ZERO,false,0); \\n        \\n        // set bitlen initially as we will be potentially modifying 'bits'\\n        bn.bitlen = bn.bitlen-(bits);\\n\\n        // handle shifts greater than 256:\\n        // if bits is greater than 256 we can simply remove any trailing words, by altering the BN length. \\n        // we also update 'bits' so that it is now in the range 0..256.\\n        assembly {\\n            if or(gt(bits, 0x100), eq(bits, 0x100)) {\\n                length := sub(length, mul(div(bits, 0x100), 0x20))\\n                mstore(mload(bn), length)\\n                bits := mod(bits, 0x100)\\n            }\\n\\n            // if bits is multiple of 8 (byte size), we can simply use identity precompile for cheap memcopy.\\n            // otherwise we shift each word, starting at the least signifcant word, one-by-one using the mask technique.\\n            // TODO it is possible to do this without the last two operations, see SHL identity copy.\\n            let bn_val_ptr := mload(bn)\\n            switch eq(mod(bits, 8), 0)\\n              case 1 {  \\n                  let bytes_shift := div(bits, 8)\\n                  let in          := mload(bn)\\n                  let inlength    := mload(in)\\n                  let insize      := add(inlength, 0x20)\\n                  let out         := add(in,     bytes_shift)\\n                  let outsize     := sub(insize, bytes_shift)\\n                  let success     := staticcall(450, 0x4, in, insize, out, insize)\\n                  mstore8(add(out, 0x1f), 0) // maintain our BN layout following identity call:\\n                  mstore(in, inlength)         // set current length byte to 0, and reset old length.\\n              }\\n              default {\\n                  let mask\\n                  let lsw\\n                  let mask_shift := sub(0x100, bits)\\n                  let lsw_ptr := add(bn_val_ptr, length)   \\n                  for { let i := length } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\\n                      switch eq(i,0x20)                                         // if i==32:\\n                          case 1 { mask := 0 }                                  //    - handles lsword: no mask needed.\\n                          default { mask := mload(sub(lsw_ptr,0x20)) }          //    - else get mask (previous word)\\n                      lsw := shr(bits, mload(lsw_ptr))                          // right shift current by bits\\n                      mask := shl(mask_shift, mask)                             // left shift next significant word by mask_shift\\n                      mstore(lsw_ptr, or(lsw,mask))                             // store OR'd mask and shifted bits in-place\\n                      lsw_ptr := sub(lsw_ptr, 0x20)                             // point to next bits.\\n                  }\\n              }\\n\\n            // The following removes the leading word containing all zeroes in the result should it exist, \\n            // as well as updating lengths and pointers as necessary.\\n            let msw_ptr := add(bn_val_ptr,0x20)\\n            switch eq(mload(msw_ptr), 0) \\n                case 1 {\\n                   mstore(msw_ptr, sub(mload(bn_val_ptr), 0x20)) // store new length in new position\\n                   mstore(bn, msw_ptr)                           // update pointer from bn\\n                }\\n                default {}\\n        }\\n    \\n\\n        return bn;\\n    }\\n\\n    /** @notice left shift BigNumber value\\n      * @dev shr: left shift BigNumber a by 'bits' bits.\\n                  ensures the value is not negative before calling the private function.\\n      * @param a BigNumber value to shift\\n      * @param bits amount of bits to shift by\\n      * @return result BigNumber\\n      */\\n    function shl(\\n        BigNumber memory a, \\n        uint bits\\n    ) internal view returns(BigNumber memory){\\n        require(!a.neg);\\n        return _shl(a, bits);\\n    }\\n\\n    /** @notice sha3 hash a BigNumber.\\n      * @dev hash: takes a BigNumber and performs sha3 hash on it.\\n      *            we hash each BigNumber WITHOUT it's first word - first word is a pointer to the start of the bytes value,\\n      *            and so is different for each struct.\\n      *             \\n      * @param a BigNumber\\n      * @return h bytes32 hash.\\n      */\\n    function hash(\\n        BigNumber memory a\\n    ) internal pure returns(bytes32 h) {\\n        //amount of words to hash = all words of the value and three extra words: neg, bitlen & value length.     \\n        assembly {\\n            h := keccak256( add(a,0x20), add (mload(mload(a)), 0x60 ) ) \\n        }\\n    }\\n\\n    /** @notice BigNumber full zero check\\n      * @dev isZero: checks if the BigNumber is in the default zero format for BNs (ie. the result from zero()).\\n      *             \\n      * @param a BigNumber\\n      * @return boolean result.\\n      */\\n    function isZero(\\n        BigNumber memory a\\n    ) internal pure returns(bool) {\\n        return isZero(a.val) && a.val.length==0x20 && !a.neg && a.bitlen == 0;\\n    }\\n\\n\\n    /** @notice bytes zero check\\n      * @dev isZero: checks if input bytes value resolves to zero.\\n      *             \\n      * @param a bytes value\\n      * @return boolean result.\\n      */\\n    function isZero(\\n        bytes memory a\\n    ) internal pure returns(bool) {\\n        uint msword;\\n        uint msword_ptr;\\n        assembly {\\n            msword_ptr := add(a,0x20)\\n        }\\n        for(uint i=0; i<a.length; i+=32) {\\n            assembly { msword := mload(msword_ptr) } // get msword of input\\n            if(msword > 0) return false;\\n            assembly { msword_ptr := add(msword_ptr, 0x20) }\\n        }\\n        return true;\\n\\n    }\\n\\n    /** @notice BigNumber value bit length\\n      * @dev bitLength: returns BigNumber value bit length- ie. log2 (most significant bit of value)\\n      *             \\n      * @param a BigNumber\\n      * @return uint bit length result.\\n      */\\n    function bitLength(\\n        BigNumber memory a\\n    ) internal pure returns(uint){\\n        return bitLength(a.val);\\n    }\\n\\n    /** @notice bytes bit length\\n      * @dev bitLength: returns bytes bit length- ie. log2 (most significant bit of value)\\n      *             \\n      * @param a bytes value\\n      * @return r uint bit length result.\\n      */\\n    function bitLength(\\n        bytes memory a\\n    ) internal pure returns(uint r){\\n        if(isZero(a)) return 0;\\n        uint msword; \\n        assembly {\\n            msword := mload(add(a,0x20))               // get msword of input\\n        }\\n        r = bitLength(msword);                         // get bitlen of msword, add to size of remaining words.\\n        assembly {                                           \\n            r := add(r, mul(sub(mload(a), 0x20) , 8))  // res += (val.length-32)*8;  \\n        }\\n    }\\n\\n    /** @notice uint bit length\\n        @dev bitLength: get the bit length of a uint input - ie. log2 (most significant bit of 256 bit value (one EVM word))\\n      *                       credit: Tjaden Hess @ ethereum.stackexchange             \\n      * @param a uint value\\n      * @return r uint bit length result.\\n      */\\n    function bitLength(\\n        uint a\\n    ) internal pure returns (uint r){\\n        assembly {\\n            switch eq(a, 0)\\n            case 1 {\\n                r := 0\\n            }\\n            default {\\n                let arg := a\\n                a := sub(a,1)\\n                a := or(a, div(a, 0x02))\\n                a := or(a, div(a, 0x04))\\n                a := or(a, div(a, 0x10))\\n                a := or(a, div(a, 0x100))\\n                a := or(a, div(a, 0x10000))\\n                a := or(a, div(a, 0x100000000))\\n                a := or(a, div(a, 0x10000000000000000))\\n                a := or(a, div(a, 0x100000000000000000000000000000000))\\n                a := add(a, 1)\\n                let m := mload(0x40)\\n                mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\\n                mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\\n                mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\\n                mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\\n                mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\\n                mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\\n                mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\\n                mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\\n                mstore(0x40, add(m, 0x100))\\n                let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\\n                let shift := 0x100000000000000000000000000000000000000000000000000000000000000\\n                let _a := div(mul(a, magic), shift)\\n                r := div(mload(add(m,sub(255,_a))), shift)\\n                r := add(r, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\\n                // where a is a power of two, result needs to be incremented. we use the power of two trick here: if(arg & arg-1 == 0) ++r;\\n                if eq(and(arg, sub(arg, 1)), 0) {\\n                    r := add(r, 1) \\n                }\\n            }\\n        }\\n    }\\n\\n    /** @notice BigNumber zero value\\n        @dev zero: returns zero encoded as a BigNumber\\n      * @return zero encoded as BigNumber\\n      */\\n    function zero(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(ZERO, false, 0);\\n    }\\n\\n    /** @notice BigNumber one value\\n        @dev one: returns one encoded as a BigNumber\\n      * @return one encoded as BigNumber\\n      */\\n    function one(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(ONE, false, 1);\\n    }\\n\\n    /** @notice BigNumber two value\\n        @dev two: returns two encoded as a BigNumber\\n      * @return two encoded as BigNumber\\n      */\\n    function two(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(TWO, false, 2);\\n    }\\n    // ***************** END EXPOSED HELPER FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE MANAGEMENT FUNCTIONS ******************\\n    /** @notice Create a new BigNumber.\\n        @dev init: overloading allows caller to obtionally pass bitlen where it is known - as it is cheaper to do off-chain and verify on-chain. \\n      *            we assert input is in data structure as defined above, and that bitlen, if passed, is correct.\\n      *            'copy' parameter indicates whether or not to copy the contents of val to a new location in memory (for example where you pass \\n      *            the contents of another variable's value in)\\n      * @param val bytes - bignum value.\\n      * @param neg bool - sign of value\\n      * @param bitlen uint - bit length of value\\n      * @return r BigNumber initialized value.\\n      */\\n    function _init(\\n        bytes memory val, \\n        bool neg, \\n        uint bitlen\\n    ) private view returns(BigNumber memory r){ \\n        // use identity at location 0x4 for cheap memcpy.\\n        // grab contents of val, load starting from memory end, update memory end pointer.\\n        assembly {\\n            let data := add(val, 0x20)\\n            let length := mload(val)\\n            let out\\n            let freemem := msize()\\n            switch eq(mod(length, 0x20), 0)                       // if(val.length % 32 == 0)\\n                case 1 {\\n                    out     := add(freemem, 0x20)                 // freememory location + length word\\n                    mstore(freemem, length)                       // set new length \\n                }\\n                default { \\n                    let offset  := sub(0x20, mod(length, 0x20))   // offset: 32 - (length % 32)\\n                    out     := add(add(freemem, offset), 0x20)    // freememory location + offset + length word\\n                    mstore(freemem, add(length, offset))          // set new length \\n                }\\n            pop(staticcall(450, 0x4, data, length, out, length))  // copy into 'out' memory location\\n            mstore(0x40, add(freemem, add(mload(freemem), 0x20))) // update the free memory pointer\\n            \\n            // handle leading zero words. assume freemem is pointer to bytes value\\n            let bn_length := mload(freemem)\\n            for { } eq ( eq(bn_length, 0x20), 0) { } {            // for(; length!=32; length-=32)\\n             switch eq(mload(add(freemem, 0x20)),0)               // if(msword==0):\\n                    case 1 { freemem := add(freemem, 0x20) }      //     update length pointer\\n                    default { break }                             // else: loop termination. non-zero word found\\n                bn_length := sub(bn_length,0x20)                          \\n            } \\n            mstore(freemem, bn_length)                             \\n\\n            mstore(r, freemem)                                    // store new bytes value in r\\n            mstore(add(r, 0x20), neg)                             // store neg value in r\\n        }\\n\\n        r.bitlen = bitlen == 0 ? bitLength(r.val) : bitlen;\\n    }\\n    // ***************** END PRIVATE MANAGEMENT FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE CORE CALCULATION FUNCTIONS ******************\\n    /** @notice takes two BigNumber memory values and the bitlen of the max value, and adds them.\\n      * @dev _add: This function is private and only callable from add: therefore the values may be of different sizes,\\n      *            in any order of size, and of different signs (handled in add).\\n      *            As values may be of different sizes, inputs are considered starting from the least significant \\n      *            words, working back. \\n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \\n      *            max_bitlen++) and returns a new BigNumber memory value.\\n      *\\n      * @param max bytes -  biggest value  (determined from add)\\n      * @param min bytes -  smallest value (determined from add)\\n      * @param max_bitlen uint - bit length of max value.\\n      * @return bytes result - max + min.\\n      * @return uint - bit length of result.\\n      */\\n    function _add(\\n        bytes memory max, \\n        bytes memory min, \\n        uint max_bitlen\\n    ) private pure returns (bytes memory, uint) {\\n        bytes memory result;\\n        assembly {\\n\\n            let result_start := msize()                                       // Get the highest available block of memory\\n            let carry := 0\\n            let uint_max := sub(0,1)\\n\\n            let max_ptr := add(max, mload(max))\\n            let min_ptr := add(min, mload(min))                               // point to last word of each byte array.\\n\\n            let result_ptr := add(add(result_start,0x20), mload(max))         // set result_ptr end.\\n\\n            for { let i := mload(max) } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\\n                let max_val := mload(max_ptr)                                 // get next word for 'max'\\n                switch gt(i,sub(mload(max),mload(min)))                       // if(i>(max_length-min_length)). while \\n                                                                              // 'min' words are still available.\\n                    case 1{ \\n                        let min_val := mload(min_ptr)                         //      get next word for 'min'\\n                        mstore(result_ptr, add(add(max_val,min_val),carry))   //      result_word = max_word+min_word+carry\\n                        switch gt(max_val, sub(uint_max,sub(min_val,carry)))  //      this switch block finds whether or\\n                                                                              //      not to set the carry bit for the\\n                                                                              //      next iteration.\\n                            case 1  { carry := 1 }\\n                            default {\\n                                switch and(eq(max_val,uint_max),or(gt(carry,0), gt(min_val,0)))\\n                                case 1 { carry := 1 }\\n                                default{ carry := 0 }\\n                            }\\n                            \\n                        min_ptr := sub(min_ptr,0x20)                       //       point to next 'min' word\\n                    }\\n                    default{                                               // else: remainder after 'min' words are complete.\\n                        mstore(result_ptr, add(max_val,carry))             //       result_word = max_word+carry\\n                        \\n                        switch and( eq(uint_max,max_val), eq(carry,1) )    //       this switch block finds whether or \\n                                                                           //       not to set the carry bit for the \\n                                                                           //       next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n                    }\\n                result_ptr := sub(result_ptr,0x20)                         // point to next 'result' word\\n                max_ptr := sub(max_ptr,0x20)                               // point to next 'max' word\\n            }\\n\\n            switch eq(carry,0) \\n                case 1{ result_start := add(result_start,0x20) }           // if carry is 0, increment result_start, ie.\\n                                                                           // length word for result is now one word \\n                                                                           // position ahead.\\n                default { mstore(result_ptr, 1) }                          // else if carry is 1, store 1; overflow has\\n                                                                           // occured, so length word remains in the \\n                                                                           // same position.\\n\\n            result := result_start                                         // point 'result' bytes value to the correct\\n                                                                           // address in memory.\\n            mstore(result,add(mload(max),mul(0x20,carry)))                 // store length of result. we are finished \\n                                                                           // with the byte array.\\n            \\n            mstore(0x40, add(result,add(mload(result),0x20)))              // Update freemem pointer to point to new \\n                                                                           // end of memory.\\n\\n            // we now calculate the result's bit length.\\n            // with addition, if we assume that some a is at least equal to some b, then the resulting bit length will\\n            // be a's bit length or (a's bit length)+1, depending on carry bit.this is cheaper than calling bitLength.\\n            let msword := mload(add(result,0x20))                             // get most significant word of result\\n            // if(msword==1 || msword>>(max_bitlen % 256)==1):\\n            if or( eq(msword, 1), eq(shr(mod(max_bitlen,256),msword),1) ) {\\n                    max_bitlen := add(max_bitlen, 1)                          // if msword's bit length is 1 greater \\n                                                                              // than max_bitlen, OR overflow occured,\\n                                                                              // new bitlen is max_bitlen+1.\\n                }\\n        }\\n        \\n\\n        return (result, max_bitlen);\\n    }\\n\\n    /** @notice takes two BigNumber memory values and subtracts them.\\n      * @dev _sub: This function is private and only callable from add: therefore the values may be of different sizes, \\n      *            in any order of size, and of different signs (handled in add).\\n      *            As values may be of different sizes, inputs are considered starting from the least significant words,\\n      *            working back. \\n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \\n      *            max_bitlen++) and returns a new BigNumber memory value.\\n      *\\n      * @param max bytes -  biggest value  (determined from add)\\n      * @param min bytes -  smallest value (determined from add)\\n      * @return bytes result - max + min.\\n      * @return uint - bit length of result.\\n      */\\n    function _sub(\\n        bytes memory max, \\n        bytes memory min\\n    ) internal pure returns (bytes memory, uint) {\\n        bytes memory result;\\n        uint carry = 0;\\n        uint uint_max = type(uint256).max;\\n        assembly {\\n                \\n            let result_start := msize()                                     // Get the highest available block of \\n                                                                            // memory\\n        \\n            let max_len := mload(max)\\n            let min_len := mload(min)                                       // load lengths of inputs\\n            \\n            let len_diff := sub(max_len,min_len)                            // get differences in lengths.\\n            \\n            let max_ptr := add(max, max_len)\\n            let min_ptr := add(min, min_len)                                // go to end of arrays\\n            let result_ptr := add(result_start, max_len)                    // point to least significant result \\n                                                                            // word.\\n            let memory_end := add(result_ptr,0x20)                          // save memory_end to update free memory\\n                                                                            // pointer at the end.\\n            \\n            for { let i := max_len } eq(eq(i,0),0) { i := sub(i, 0x20) } {  // for(int i=max_length; i!=0; i-=32)\\n                let max_val := mload(max_ptr)                               // get next word for 'max'\\n                switch gt(i,len_diff)                                       // if(i>(max_length-min_length)). while\\n                                                                            // 'min' words are still available.\\n                    case 1{ \\n                        let min_val := mload(min_ptr)                       //  get next word for 'min'\\n        \\n                        mstore(result_ptr, sub(sub(max_val,min_val),carry)) //  result_word = (max_word-min_word)-carry\\n                    \\n                        switch or(lt(max_val, add(min_val,carry)), \\n                               and(eq(min_val,uint_max), eq(carry,1)))      //  this switch block finds whether or \\n                                                                            //  not to set the carry bit for the next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n                            \\n                        min_ptr := sub(min_ptr,0x20)                        //  point to next 'result' word\\n                    }\\n                    default {                                               // else: remainder after 'min' words are complete.\\n\\n                        mstore(result_ptr, sub(max_val,carry))              //      result_word = max_word-carry\\n                    \\n                        switch and( eq(max_val,0), eq(carry,1) )            //      this switch block finds whether or \\n                                                                            //      not to set the carry bit for the \\n                                                                            //      next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n\\n                    }\\n                result_ptr := sub(result_ptr,0x20)                          // point to next 'result' word\\n                max_ptr    := sub(max_ptr,0x20)                             // point to next 'max' word\\n            }      \\n\\n            //the following code removes any leading words containing all zeroes in the result.\\n            result_ptr := add(result_ptr,0x20)                                                 \\n\\n            // for(result_ptr+=32;; result==0; result_ptr+=32)\\n            for { }   eq(mload(result_ptr), 0) { result_ptr := add(result_ptr,0x20) } { \\n               result_start := add(result_start, 0x20)                      // push up the start pointer for the result\\n               max_len := sub(max_len,0x20)                                 // subtract a word (32 bytes) from the \\n                                                                            // result length.\\n            } \\n\\n            result := result_start                                          // point 'result' bytes value to \\n                                                                            // the correct address in memory\\n            \\n            mstore(result,max_len)                                          // store length of result. we \\n                                                                            // are finished with the byte array.\\n            \\n            mstore(0x40, memory_end)                                        // Update freemem pointer.\\n        }\\n\\n        uint new_bitlen = bitLength(result);                                // calculate the result's \\n                                                                            // bit length.\\n        \\n        return (result, new_bitlen);\\n    }\\n\\n    /** @notice gets the modulus value necessary for calculating exponetiation.\\n      * @dev _powModulus: we must pass the minimum modulus value which would return JUST the a^b part of the calculation\\n      *       in modexp. the rationale here is:\\n      *       if 'a' has n bits, then a^e has at most n*e bits.\\n      *       using this modulus in exponetiation will result in simply a^e.\\n      *       therefore the value may be many words long.\\n      *       This is done by:\\n      *         - storing total modulus byte length\\n      *         - storing first word of modulus with correct bit set\\n      *         - updating the free memory pointer to come after total length.\\n      *\\n      * @param a BigNumber base\\n      * @param e uint exponent\\n      * @return BigNumber modulus result\\n      */\\n    function _powModulus(\\n        BigNumber memory a, \\n        uint e\\n    ) private pure returns(BigNumber memory){\\n        bytes memory _modulus = ZERO;\\n        uint mod_index;\\n\\n        assembly {\\n            mod_index := mul(mload(add(a, 0x40)), e)               // a.bitlen * e is the max bitlength of result\\n            let first_word_modulus := shl(mod(mod_index, 256), 1)  // set bit in first modulus word.\\n            mstore(_modulus, mul(add(div(mod_index,256),1),0x20))  // store length of modulus\\n            mstore(add(_modulus,0x20), first_word_modulus)         // set first modulus word\\n            mstore(0x40, add(_modulus, add(mload(_modulus),0x20))) // update freemem pointer to be modulus index\\n                                                                   // + length\\n        }\\n\\n        //create modulus BigNumber memory for modexp function\\n        return BigNumber(_modulus, false, mod_index); \\n    }\\n\\n    /** @notice Modular Exponentiation: Takes bytes values for base, exp, mod and calls precompile for (base^exp)%^mod\\n      * @dev modexp: Wrapper for built-in modexp (contract 0x5) as described here: \\n      *              https://github.com/ethereum/EIPs/pull/198\\n      *\\n      * @param _b bytes base\\n      * @param _e bytes base_inverse \\n      * @param _m bytes exponent\\n      * @param r bytes result.\\n      */\\n    function _modexp(\\n        bytes memory _b, \\n        bytes memory _e, \\n        bytes memory _m\\n    ) private view returns(bytes memory r) {\\n        assembly {\\n            \\n            let bl := mload(_b)\\n            let el := mload(_e)\\n            let ml := mload(_m)\\n            \\n            \\n            let freemem := mload(0x40) // Free memory pointer is always stored at 0x40\\n            \\n            \\n            mstore(freemem, bl)         // arg[0] = base.length @ +0\\n            \\n            mstore(add(freemem,32), el) // arg[1] = exp.length @ +32\\n            \\n            mstore(add(freemem,64), ml) // arg[2] = mod.length @ +64\\n            \\n            // arg[3] = base.bits @ + 96\\n            // Use identity built-in (contract 0x4) as a cheap memcpy\\n            let success := staticcall(450, 0x4, add(_b,32), bl, add(freemem,96), bl)\\n            \\n            // arg[4] = exp.bits @ +96+base.length\\n            let size := add(96, bl)\\n            success := staticcall(450, 0x4, add(_e,32), el, add(freemem,size), el)\\n            \\n            // arg[5] = mod.bits @ +96+base.length+exp.length\\n            size := add(size,el)\\n            success := staticcall(450, 0x4, add(_m,32), ml, add(freemem,size), ml)\\n            \\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\\n\\n            // Total size of input = 96+base.length+exp.length+mod.length\\n            size := add(size,ml)\\n            // Invoke contract 0x5, put return value right after mod.length, @ +96\\n            success := staticcall(sub(gas(), 1350), 0x5, freemem, size, add(freemem, 0x60), ml)\\n\\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\\n\\n            let length := ml\\n            let msword_ptr := add(freemem, 0x60)\\n\\n            ///the following code removes any leading words containing all zeroes in the result.\\n            for { } eq ( eq(length, 0x20), 0) { } {                   // for(; length!=32; length-=32)\\n                switch eq(mload(msword_ptr),0)                        // if(msword==0):\\n                    case 1 { msword_ptr := add(msword_ptr, 0x20) }    //     update length pointer\\n                    default { break }                                 // else: loop termination. non-zero word found\\n                length := sub(length,0x20)                          \\n            } \\n            r := sub(msword_ptr,0x20)\\n            mstore(r, length)\\n            \\n            // point to the location of the return value (length, bits)\\n            //assuming mod length is multiple of 32, return value is already in the right format.\\n            mstore(0x40, add(add(96, freemem),ml)) //deallocate freemem pointer\\n        }        \\n    }\\n    // ***************** END PRIVATE CORE CALCULATION FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE HELPER FUNCTIONS ******************\\n    /** @notice left shift BigNumber memory 'dividend' by 'value' bits.\\n      * @param bn value to shift\\n      * @param bits amount of bits to shift by\\n      * @return r result\\n      */\\n    function _shl(\\n        BigNumber memory bn, \\n        uint bits\\n    ) private view returns(BigNumber memory r) {\\n        if(bits==0 || bn.bitlen==0) return bn;\\n        \\n        // we start by creating an empty bytes array of the size of the output, based on 'bits'.\\n        // for that we must get the amount of extra words needed for the output.\\n        uint length = bn.val.length;\\n        // position of bitlen in most significnat word\\n        uint bit_position = ((bn.bitlen-1) % 256) + 1;\\n        // total extra words. we check if the bits remainder will add one more word.\\n        uint extra_words = (bits / 256) + ( (bits % 256) >= (256 - bit_position) ? 1 : 0);\\n        // length of output\\n        uint total_length = length + (extra_words * 0x20);\\n\\n        r.bitlen = bn.bitlen+(bits);\\n        r.neg = bn.neg;\\n        bits %= 256;\\n\\n        \\n        bytes memory bn_shift;\\n        uint bn_shift_ptr;\\n        // the following efficiently creates an empty byte array of size 'total_length'\\n        assembly {\\n            let freemem_ptr := mload(0x40)                // get pointer to free memory\\n            mstore(freemem_ptr, total_length)             // store bytes length\\n            let mem_end := add(freemem_ptr, total_length) // end of memory\\n            mstore(mem_end, 0)                            // store 0 at memory end\\n            bn_shift := freemem_ptr                       // set pointer to bytes\\n            bn_shift_ptr := add(bn_shift, 0x20)           // get bn_shift pointer\\n            mstore(0x40, add(mem_end, 0x20))              // update freemem pointer\\n        }\\n\\n        // use identity for cheap copy if bits is multiple of 8.\\n        if(bits % 8 == 0) {\\n            // calculate the position of the first byte in the result.\\n            uint bytes_pos = ((256-(((bn.bitlen-1)+bits) % 256))-1) / 8;\\n            uint insize = (bn.bitlen / 8) + ((bn.bitlen % 8 != 0) ? 1 : 0);\\n            assembly {\\n              let in          := add(add(mload(bn), 0x20), div(sub(256, bit_position), 8))\\n              let out         := add(bn_shift_ptr, bytes_pos)\\n              let success     := staticcall(450, 0x4, in, insize, out, length)\\n            }\\n            r.val = bn_shift;\\n            return r;\\n        }\\n\\n\\n        uint mask;\\n        uint mask_shift = 0x100-bits;\\n        uint msw;\\n        uint msw_ptr;\\n\\n       assembly {\\n           msw_ptr := add(mload(bn), 0x20)   \\n       }\\n        \\n       // handle first word before loop if the shift adds any extra words.\\n       // the loop would handle it if the bit shift doesn't wrap into the next word, \\n       // so we check only for that condition.\\n       if((bit_position+bits) > 256){\\n           assembly {\\n              msw := mload(msw_ptr)\\n              mstore(bn_shift_ptr, shr(mask_shift, msw))\\n              bn_shift_ptr := add(bn_shift_ptr, 0x20)\\n           }\\n       }\\n        \\n       // as a result of creating the empty array we just have to operate on the words in the original bn.\\n       for(uint i=bn.val.length; i!=0; i-=0x20){                  // for each word:\\n           assembly {\\n               msw := mload(msw_ptr)                              // get most significant word\\n               switch eq(i,0x20)                                  // if i==32:\\n                   case 1 { mask := 0 }                           // handles msword: no mask needed.\\n                   default { mask := mload(add(msw_ptr,0x20)) }   // else get mask (next word)\\n               msw := shl(bits, msw)                              // left shift current msw by 'bits'\\n               mask := shr(mask_shift, mask)                      // right shift next significant word by mask_shift\\n               mstore(bn_shift_ptr, or(msw,mask))                 // store OR'd mask and shifted bits in-place\\n               msw_ptr := add(msw_ptr, 0x20)\\n               bn_shift_ptr := add(bn_shift_ptr, 0x20)\\n           }\\n       }\\n\\n       r.val = bn_shift;\\n    }\\n    // ***************** END PRIVATE HELPER FUNCTIONS ******************\\n}\\n\",\"keccak256\":\"0x581b5e7b7700a01eeec9ac00825ddb81753cfea182c9211e733eaf883584f7de\",\"license\":\"MIT\"},\"contracts/LetsFilRaiseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./NoDelegateCall.sol\\\";\\nimport \\\"./interfaces/ILetsFilRaiseFactory.sol\\\";\\nimport \\\"./LetsFilRaisePlan.sol\\\";\\n\\ncontract LetsFilRaiseFactory is ILetsFilRaiseFactory, NoDelegateCall {\\n\\n    event eCreateRaisePlan(address raisePool, address caller, uint256 payValue, RaiseInfo raiseInfo, NodeInfo nodeInfo, uint256 raiseID);\\n    event eTest(address addr);\\n\\n    //raise plan ID\\n    uint256 private raiseID;\\n    // minerId => raiseId[], all inactive raise plan\\n    mapping(uint64 => uint256[]) private inactivePlan;\\n    // minerId => raiseId, running plan\\n    mapping(uint64 => uint256) private activePlan;\\n    // raiseId => raisePlan, all raise plan info\\n    mapping(uint256 => RaisePlan) private plans;\\n    // api manager\\n    address private manager;\\n\\n    constructor(address _manager) {\\n        manager = _manager;\\n    }\\n    \\n    // endPlan, Need to move active to inactive array\\n    function endPlan(uint256 _raiseID) external noDelegateCall returns (bool) {\\n        RaisePlan memory plan = plans[_raiseID];\\n        require(plan.sponsor == tx.origin, \\\"END_PLAN_ORIGIN_ERROR\\\");\\n        delete activePlan[plan.minerId];\\n        inactivePlan[plan.minerId].push(plan.raiseId);\\n        return true;\\n    }\\n\\n    // create new raise plan\\n    function createRaisePlan(RaiseInfo memory _raiseInfo, NodeInfo memory _nodeInfo) payable external noDelegateCall returns (address planAddress) {\\n        _raiseInfo.id = ++raiseID;\\n        require(activePlan[_nodeInfo.minerID] == 0, \\\"miner already exists\\\");\\n        planAddress = deploy(++raiseID, _raiseInfo, _nodeInfo, manager);\\n        emit eCreateRaisePlan(planAddress, msg.sender, msg.value, _raiseInfo, _nodeInfo, _raiseInfo.id);\\n    }\\n\\n    // depoly raise plan\\n    function deploy(uint256 _raiseID, RaiseInfo memory _raiseInfo, NodeInfo memory _nodeInfo, address manager) internal returns (address) {\\n        return address(new LetsFilRaisePlan{\\n                salt: keccak256(abi.encode(raiseID)), \\n                value: msg.value\\n            }(_raiseID, _raiseInfo, _nodeInfo, manager, address(this)));\\n    }\\n}\\n\\n\",\"keccak256\":\"0x000cd050a650eb3f2f62aa79211d6a8fb8216b3792c94549400d3f6a4cef5cbe\",\"license\":\"MIT\"},\"contracts/LetsFilRaisePlan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./interfaces/ILetsFilRaisePlan.sol\\\";\\nimport \\\"./interfaces/ILetsFilRaiseInfo.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"@zondax/filecoin-solidity/contracts/v0.8/utils/BigInts.sol\\\";\\nimport \\\"@zondax/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\\\";\\nimport \\\"@zondax/filecoin-solidity/contracts/v0.8/types/MinerTypes.sol\\\";\\nimport \\\"@zondax/filecoin-solidity/contracts/v0.8/MinerAPI.sol\\\";\\nimport \\\"./LetsFilRaiseFactory.sol\\\";\\n\\nenum RaiseState { \\n    WaitingStart,   \\n    WaitingPayOPSSecurityFund,\\n    WaitingSPSign, \\n    Raising,  \\n    Closed,  \\n    Success,\\n    Failure   \\n}\\n\\nenum NodeState {\\n    WaitingStart,\\n    Started,\\n    Delayed,\\n    End,\\n    Success,\\n    Failure,\\n    Terminated\\n}\\n\\n\\ncontract LetsFilRaisePlan is ILetsFilRaisePlan, Ownable {\\n\\n    uint256 public immutable PLEDGE_MIN_AMOUNT = 10 ether;\\n\\n    RaiseState public raiseState;\\n    NodeState public nodeState;\\n\\n    uint256 public raiseID;\\n    RaiseInfo public raiseInfo;\\n    NodeInfo public nodeInfo;\\n    uint256 public totalRewardAmount;\\n    uint256 public availableRewardAmount;\\n\\n    uint256 public pledgeTotalAmount;\\n    mapping(address => uint256) public pledgeRecord;\\n    mapping(address => uint256) public withdrawRecord;\\n\\n    uint256 public startSealTime;\\n    uint256 public initPledgeAmount;\\n    uint256 public securityFundRemainAmount;\\n    uint256 public opsSecurityFundRemainAmount;\\n\\n    //api manager\\n    address private manager;\\n    address private factoryAddress;\\n\\n    // events\\n    event eDepositOPSSecurityFund(uint256 raiseID, address sender, uint256 amount);\\n    event eStartRaisePlan(address caller, uint256 raiseID);\\n    event eCloseRaisePlan(address caller, uint256 raiseID);\\n    event eWithdrawRaiseSecurityFund(address caller, uint256 raiseID, uint256 amount);\\n    event eWithdrawOPSSecurityFund(address caller, uint256 raiseID, uint256 amount);\\n    event eStaking(uint256 raiseID, address from, address to, uint256 amount);\\n    event eRaiseFailed(uint256 raiseID);\\n    event eUnstaking(uint256 raiseID, address from, address to, uint256 amount);\\n    event eSealingState(uint256 raiseID, NodeState state);\\n    event ePushBlockReward(uint256 released, uint256 willRelease);\\n    event eInvestorWithdraw(uint256 raiseID, address contractAddress, address from, address to, uint256 amount);\\n    event eRaiseWithdraw(uint256 raiseID, address from, address to, uint256 amount);\\n    event eSPWithdraw(uint256 raiseID, address from, address to, uint256 amount);\\n\\n    // errors\\n    string constant PARAMS_ERROR = \\\"param error\\\";\\n    string constant PERMISSION_ERROR = \\\"No permission\\\";\\n    error NonPaymentOPSSecurityFund(); \\n    error RaiseHaveSucceeded();\\n    error CannotWithdrawRaiseSecurityFund();\\n    error CannotWithdrawOPSSecurityFund();\\n    error RaiseNotInRaising(RaiseState state);\\n    error RaiseMinAmountWrong();\\n    error ForbidWithdrawSecurityFund();\\n    error UnstakingAmountError();\\n\\n    constructor(uint256 _raiseID, RaiseInfo memory _raiseInfo, NodeInfo memory _nodeInfo, address _manager, address _factoryAddress) payable {\\n        raiseID = _raiseID;\\n        raiseInfo = _raiseInfo;\\n        nodeInfo = _nodeInfo;\\n        manager = _manager;\\n        raiseState = RaiseState.WaitingPayOPSSecurityFund;\\n        securityFundRemainAmount = msg.value;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager ,\\\"Not manager\\\");\\n        _;\\n    }\\n\\n    modifier onlySP() {\\n        require(msg.sender == raiseInfo.spAddress ,\\\"Not server signer\\\");\\n        _;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function specifyOpsPayer(address payer) external onlyOwner {\\n        nodeInfo.opsSecurityFundPayer = payer;\\n    }\\n\\n    //pay second ops security fund by specify sp address\\n    function payOpsSecurityFund() payable external {\\n        require(raiseState == RaiseState.WaitingPayOPSSecurityFund, \\\"Raise state must be WaitingPayOPSSecurityFund\\\");\\n        require(msg.value == nodeInfo.opsSecurityFund, \\\"Wrong ops security fund\\\");\\n        require(msg.sender == nodeInfo.opsSecurityFundPayer, PERMISSION_ERROR);\\n        require(pledgeRecord[msg.sender] == 0, \\\"OPSSecurityFund has been paid\\\");\\n\\n        pledgeRecord[msg.sender] = msg.value;\\n        pledgeTotalAmount = msg.value;\\n        opsSecurityFundRemainAmount = msg.value;\\n\\n        raiseState = RaiseState.WaitingSPSign;\\n        emit eDepositOPSSecurityFund(raiseID, msg.sender, msg.value);\\n    }\\n\\n    function startRaisePlan() external onlySP {\\n        if(raiseState != RaiseState.WaitingSPSign) {\\n            revert NonPaymentOPSSecurityFund();\\n        }\\n        // Verify that the node owner is the contract address todo...\\n\\n        // Confirm set-owner todo...\\n        changeBeneficiary(CommonTypes.FilActorId.wrap(nodeInfo.minerID), CommonTypes.ChainEpoch.wrap(int64(uint64(block.timestamp + nodeInfo.nodePeriod * 2))));\\n\\n        raiseState = RaiseState.Raising;\\n        emit eStartRaisePlan(msg.sender, raiseID);\\n    }\\n\\n    event eChangeBeneficiary(CommonTypes.FilActorId _minerId, CommonTypes.ChainEpoch expiration);\\n    function changeBeneficiary(CommonTypes.FilActorId _minerId, CommonTypes.ChainEpoch expiration) internal {\\n        MinerTypes.ChangeBeneficiaryParams memory params;\\n        params.new_quota = BigInts.fromUint256(type(uint256).max);\\n        params.new_expiration = expiration;\\n        params.new_beneficiary = FilAddresses.fromEthAddress(address(this));\\n        emit eChangeBeneficiary(_minerId, expiration);\\n        MinerAPI.changeBeneficiary(_minerId, params);\\n    }\\n\\n    // confirm set-owner todo...\\n    // getOwner todo...\\n    // getBeneficiary todo...\\n\\n    function closeRaisePlan() external onlyOwner {\\n        if(raiseState >= RaiseState.Closed) {\\n            revert RaiseHaveSucceeded();\\n        }\\n        raiseState = RaiseState.Closed;\\n\\n        // move minerId into inactive array\\n        require(LetsFilRaiseFactory(factoryAddress).endPlan(raiseID), \\\"close raise plan failed\\\");\\n        \\n        emit eCloseRaisePlan(msg.sender, raiseID);\\n    }\\n\\n    function withdrawRaiseSecurityFund() external onlyOwner {\\n        require(securityFundRemainAmount >= raiseInfo.securityFund, \\\"securityFund Insufficient balance\\\");\\n        if(raiseState == RaiseState.Closed || raiseState == RaiseState.Failure) {\\n            payable(msg.sender).transfer(raiseInfo.securityFund);\\n        } else {\\n            revert CannotWithdrawRaiseSecurityFund();\\n        }\\n        securityFundRemainAmount -= raiseInfo.securityFund;\\n\\n        emit eWithdrawRaiseSecurityFund(msg.sender, raiseID, raiseInfo.securityFund);\\n    }\\n    \\n    function withdrawOPSSecurityFund() external {\\n        //opsSecurityFundRemainAmount\\n        require(opsSecurityFundRemainAmount >= nodeInfo.opsSecurityFund, \\\"opsSecurityFund Insufficient balance\\\");\\n        require(msg.sender == nodeInfo.opsSecurityFundPayer, \\\"Wrong withdraw address\\\");\\n        if(!((raiseState == RaiseState.Closed || raiseState == RaiseState.Failure) && (nodeState == NodeState.Failure || nodeState == NodeState.Terminated))) {\\n            revert CannotWithdrawOPSSecurityFund();\\n        }\\n\\n        opsSecurityFundRemainAmount -= nodeInfo.opsSecurityFund;\\n        payable(msg.sender).transfer(nodeInfo.opsSecurityFund);\\n\\n        emit eWithdrawOPSSecurityFund(msg.sender, raiseID, nodeInfo.opsSecurityFund);\\n    }\\n\\n    function staking() external payable {\\n        require(block.timestamp < raiseInfo.deadline, \\\"Raise plan has expired\\\");\\n        require(pledgeTotalAmount + msg.value <= raiseInfo.targetAmount, \\\"More than the number raised\\\");\\n        if(raiseState != RaiseState.Raising) {\\n            revert RaiseNotInRaising(raiseState);\\n        }\\n\\n        // Less than the minimum amount needed to raise all\\n        if(msg.value < PLEDGE_MIN_AMOUNT) {\\n            if(raiseInfo.targetAmount - pledgeTotalAmount < PLEDGE_MIN_AMOUNT) {\\n                if(msg.value != (raiseInfo.targetAmount - pledgeTotalAmount)) {\\n                    revert RaiseMinAmountWrong();\\n                }\\n            } else {\\n                revert RaiseMinAmountWrong();\\n            }\\n        }\\n\\n        pledgeRecord[msg.sender] += msg.value;\\n        pledgeTotalAmount += msg.value;\\n        \\n        if(raiseIsSuccessed()) {\\n            raiseState = RaiseState.Success;\\n            startSealTime = block.timestamp;\\n        }\\n\\n        emit eStaking(raiseID, msg.sender, address(this), msg.value);\\n    }\\n\\n    function unStaking(uint256 _amount) external {\\n        require(raiseState == RaiseState.Raising || raiseState == RaiseState.Closed || raiseState == RaiseState.Failure, \\\"Wrong state\\\");\\n        require(pledgeRecord[msg.sender] > 0 && _amount <= pledgeRecord[msg.sender], \\\"Insufficient balance\\\");\\n\\n        //Cannot unStaking opsSecurityFund\\n        if(msg.sender == nodeInfo.opsSecurityFundPayer && _amount > (pledgeRecord[msg.sender] - nodeInfo.opsSecurityFund)) {\\n            revert ForbidWithdrawSecurityFund();\\n        }\\n\\n        if(pledgeRecord[msg.sender] - _amount < PLEDGE_MIN_AMOUNT) {\\n            revert UnstakingAmountError();\\n        }\\n\\n        // Raise expires, target not met, end of plan\\n        if (block.timestamp >= raiseInfo.deadline && pledgeTotalAmount < raiseInfo.targetAmount) {\\n            raiseState = RaiseState.Failure;\\n            emit eRaiseFailed(raiseID);\\n        }\\n\\n        pledgeRecord[msg.sender] -= _amount;\\n        pledgeTotalAmount -= _amount;\\n        payable(msg.sender).transfer(_amount);\\n\\n        emit eUnstaking(raiseID, msg.sender, address(this), _amount);\\n    }\\n\\n    // investor withdraw\\n    function investorWithdraw(address _to, uint256 _amount) external {\\n        require(_amount > 0, PARAMS_ERROR);\\n        require(_amount <= availableRewardOf(msg.sender), \\\"reward Insufficient balance\\\");\\n\\n        withdrawRecord[msg.sender] -= _amount;\\n        payable(_to).transfer(_amount);\\n\\n        emit eInvestorWithdraw(raiseID, address(this), msg.sender, _to, _amount);\\n    }\\n\\n    // raiser withdraw\\n    function raiserWithdraw(uint256 _amount) external onlyOwner {\\n        require(_amount > 0, PARAMS_ERROR);\\n        uint256 reward = availableRewardAmount * raiseInfo.raiserShare / 100;\\n        require(reward - withdrawRecord[msg.sender] >= _amount, \\\"reward Insufficient balance\\\");\\n\\n        withdrawRecord[msg.sender] += _amount;\\n        payable(msg.sender).transfer(_amount);\\n\\n        emit eRaiseWithdraw(raiseID, address(this), msg.sender, _amount);\\n    }\\n\\n    // sp withdraw\\n    function spWithdraw(uint256 _amount) external onlySP {\\n        require(_amount > 0, PARAMS_ERROR);\\n        uint256 reward = availableRewardAmount * raiseInfo.servicerShare / 100;\\n        require(reward - withdrawRecord[msg.sender] >= _amount, \\\"reward Insufficient balance\\\");\\n\\n        withdrawRecord[msg.sender] += _amount;\\n        payable(msg.sender).transfer(_amount);\\n\\n        emit eSPWithdraw(raiseID, address(this), msg.sender, _amount);\\n    }\\n\\n    // ########################## job api ############################\\n    function startSeal(uint256 startTime) external onlyManager {\\n        require(startTime <= block.timestamp, PARAMS_ERROR);\\n\\n        startSealTime = startTime;\\n        nodeState = NodeState.Started;\\n        emit eSealingState(raiseID, nodeState);\\n    }\\n\\n    function getSealState() external {\\n        if(block.timestamp >= (startSealTime + nodeInfo.sealPeriod * 86400)) {\\n            nodeState = NodeState.Delayed;\\n        }\\n        emit eSealingState(raiseID, nodeState);\\n    }\\n\\n    function stopSeal(uint256 _initPledgeAmount) external onlyManager {\\n        require(_initPledgeAmount <= raiseInfo.targetAmount, PARAMS_ERROR);\\n        nodeState = NodeState.Success;\\n        initPledgeAmount = _initPledgeAmount;\\n    }\\n\\n    function TerminateNode() external onlyManager {\\n        nodeState= NodeState.Terminated;\\n    }\\n\\n    function pushBlockReward(uint256 _released, uint256 _willRelease) external onlyManager {\\n        require(_released > 0 && _willRelease >= 0, PARAMS_ERROR);\\n        totalRewardAmount = _released + _willRelease;\\n        availableRewardAmount = _released;\\n\\n        emit ePushBlockReward(_released, _willRelease);\\n    }\\n\\n    function raiseIsSuccess() public view onlyManager returns (bool) {\\n        return pledgeTotalAmount == raiseInfo.targetAmount;\\n    }\\n    // ########################## job api end ############################\\n\\n\\n    function availableReward() public view returns (uint256) {\\n        return availableRewardOf(msg.sender);\\n    }\\n\\n    function availableRewardOf(address addr) public view returns (uint256) {\\n        return totalRewardOf(addr) - withdrawRecord[addr];\\n    }\\n\\n    function totalReward() public view returns (uint256) {\\n        return totalRewardOf(msg.sender);\\n    }\\n\\n    function totalRewardOf(address addr) public view returns (uint256) {\\n        return pledgeRecord[addr] * ((availableRewardAmount * raiseInfo.investorShare) / 100) / pledgeTotalAmount;\\n    }\\n\\n    function willRelease() public view returns (uint256) {\\n        return willRelease(msg.sender);\\n    }\\n\\n    function willRelease(address addr) public view returns (uint256) {\\n        return (pledgeRecord[addr] * ((totalRewardAmount - availableRewardAmount) * raiseInfo.investorShare) / 100) / pledgeTotalAmount;\\n    }\\n\\n\\n    function raiseIsSuccessed() public view returns (bool) { \\n        return pledgeTotalAmount  == raiseInfo.targetAmount;\\n    }\\n\\n    \\n}\",\"keccak256\":\"0x5a6a79c6886f99e69bf822a258392bea7e8b56c7bc274ffb7af0a152696942ec\",\"license\":\"MIT\"},\"contracts/NoDelegateCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function checkNotDelegateCall() private view {\\n        require(address(this) == original);\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        checkNotDelegateCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf78dac32758c375c71c225ab0f1baf6766d989d6ab5a5b4dd30fb49fa174260a\",\"license\":\"MIT\"},\"contracts/interfaces/ILetsFilRaiseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport './ILetsFilRaiseInfo.sol';\\ninterface ILetsFilRaiseFactory is ILetsFilRaiseInfo {\\n\\n    struct RaisePlan {\\n        address sponsor; //\\u53d1\\u8d77\\u4eba\\u5730\\u5740\\n        uint64 minerId; //minerID\\n        uint256 raiseId; //\\u52df\\u96c6ID\\n        address raiseAddress; //\\u52df\\u96c6\\u8ba1\\u5212ID\\n    }\\n   \\n}\",\"keccak256\":\"0xa304796539c256ed9601006476ba12f1c44fcc7d70483f3915e3cf8a02ebfcb4\",\"license\":\"MIT\"},\"contracts/interfaces/ILetsFilRaiseInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ILetsFilRaiseInfo {\\n    struct RaiseInfo {\\n        uint256 id;             // \\u52df\\u96c6ID\\uff0c\\u5408\\u7ea6\\u5185\\u9012\\u589e\\u552f\\u4e00\\u6807\\u8bc6\\n        uint256 targetAmount;   // \\u52df\\u96c6\\u76ee\\u6807\\n        uint256 securityFund;   // \\u4fdd\\u8bc1\\u91d1\\n        uint256 securityFundRate; // \\u4fdd\\u8bc1\\u91d1\\u6bd4\\u4f8b\\n        uint256 deadline;       // \\u52df\\u96c6\\u622a\\u6b62\\u65f6\\u95f4\\n        uint256 raiserShare;    // \\u52df\\u96c6\\u8005\\u6743\\u76ca\\n        uint256 investorShare;  // \\u6295\\u8d44\\u8005\\u6743\\u76ca\\n        uint256 servicerShare;  // \\u670d\\u52a1\\u5546\\u6743\\u76ca\\n        address sponsor;        // \\u53d1\\u8d77\\u4eba\\u5730\\u5740\\n        uint256 companyId;      //\\u53d1\\u8d77\\u5355\\u4f4did\\n        address spAddress;      //\\u670d\\u52a1\\u5546\\u5730\\u5740\\n    }\\n\\n    struct NodeInfo {\\n        uint256 nodeSize;           // \\u8282\\u70b9\\u5927\\u5c0f\\n        uint256 sectorSize;         // \\u6247\\u533a\\u5927\\u5c0f\\n        uint256 sealPeriod;         // \\u5c01\\u88c5\\u5468\\u671f\\n        uint256 nodePeriod;         // \\u8282\\u70b9\\u6709\\u6548\\u671f\\n        uint256 opsSecurityFund;    // \\u8fd0\\u7ef4\\u4fdd\\u8bc1\\u91d1\\n        address opsSecurityFundPayer; // \\u7f34\\u7eb3\\u8fd0\\u7ef4\\u4fdd\\u8bc1\\u91d1\\u5730\\u5740\\n        uint64 minerID;             // Miner ID\\n    }\\n}\\n\",\"keccak256\":\"0xc418e08615cfd646a165bd57b4f3639ba997e8f3c00a5e1a7e369847c179829d\",\"license\":\"MIT\"},\"contracts/interfaces/ILetsFilRaisePlan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport './ILetsFilRaiseInfo.sol';\\n\\ninterface ILetsFilRaisePlan is ILetsFilRaiseInfo {\\n\\n}\\n\",\"keccak256\":\"0xb713cf077bcc28c0cf9dcb00462f7a853b27c308ebd417eb7edd40134dff27f8\",\"license\":\"MIT\"},\"solidity-cborutils/contracts/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xe03d8889bf66e7a30e8010b022b6c86ad0f8c19764cc6c7f50b6bb4ad860cb9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516146f13803806146f183398101604081905261002f9161008d565b30608052600480546001600160a01b0319166001600160a01b03929092169190911790556100b6565b60006001600160a01b0382165b92915050565b61007481610058565b811461007f57600080fd5b50565b80516100658161006b565b6000602082840312156100a2576100a2600080fd5b60006100ae8484610082565b949350505050565b6080516146206100d1600039600061025f01526146206000f3fe6080604052600436106200002c5760003560e01c80632acb121314620000315780637f186289146200006e575b600080fd5b3480156200003e57600080fd5b50620000566200005036600462000339565b62000094565b60405162000065919062000370565b60405180910390f35b620000856200007f36600462000608565b62000177565b60405162000065919062000658565b6000620000a062000254565b600082815260036020908152604091829020825160808101845281546001600160a01b03808216808452600160a01b90920467ffffffffffffffff16948301949094526001830154948201949094526002909101549091166060820152903214620001285760405162461bcd60e51b81526004016200011f9062000697565b60405180910390fd5b6020808201805167ffffffffffffffff9081166000908152600284526040808220829055925190911681526001808452828220929094015182548086018455928252929020015590505b919050565b60006200018362000254565b60008081546200019390620006bf565b9182905550835260c082015167ffffffffffffffff1660009081526002602052604090205415620001d85760405162461bcd60e51b81526004016200011f9062000708565b620002076000808154620001ec90620006bf565b9182905550600454859085906001600160a01b03166200028c565b83516040519192507f8a51504c49dde652010a8d3604828c604531f85a17f8515bf0b82f59d625177991620002469184913391349189918991620008b5565b60405180910390a192915050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200028a57600080fd5b565b60008054604051602001620002a291906200091e565b60405160208183030381529060405280519060200120348686868630604051620002cc9062000307565b620002dc9594939291906200092e565b82906040518091039083f591505080158015620002fd573d6000803e3d6000fd5b5095945050505050565b613c62806200098983390190565b805b81146200032357600080fd5b50565b8035620003338162000315565b92915050565b600060208284031215620003505762000350600080fd5b60006200035e848462000326565b949350505050565b8015155b82525050565b6020810162000333828462000366565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715620003bf57620003bf62000380565b6040525050565b6000620003d260405190565b905062000172828262000396565b60006001600160a01b03821662000333565b6200031781620003e0565b80356200033381620003f2565b60006101608284031215620004225762000422600080fd5b6200042f610160620003c6565b905060006200043f848462000326565b8252506020620004528484830162000326565b6020830152506040620004688482850162000326565b60408301525060606200047e8482850162000326565b6060830152506080620004948482850162000326565b60808301525060a0620004aa8482850162000326565b60a08301525060c0620004c08482850162000326565b60c08301525060e0620004d68482850162000326565b60e083015250610100620004ed84828501620003fd565b61010083015250610120620005058482850162000326565b610120830152506101406200051d84828501620003fd565b6101408301525092915050565b67ffffffffffffffff811662000317565b803562000333816200052a565b600060e082840312156200055f576200055f600080fd5b6200056b60e0620003c6565b905060006200057b848462000326565b82525060206200058e8484830162000326565b6020830152506040620005a48482850162000326565b6040830152506060620005ba8482850162000326565b6060830152506080620005d08482850162000326565b60808301525060a0620005e684828501620003fd565b60a08301525060c0620005fc848285016200053b565b60c08301525092915050565b6000806102408385031215620006215762000621600080fd5b60006200062f85856200040a565b925050610160620006438582860162000548565b9150509250929050565b6200036a81620003e0565b602081016200033382846200064d565b601581526000602082017422a7222fa82620a72fa7a924a3a4a72fa2a92927a960591b815291505b5060200190565b60208082528101620003338162000668565b634e487b7160e01b600052601160045260246000fd5b60006000198203620006d557620006d5620006a9565b5060010190565b60148152600060208201736d696e657220616c72656164792065786973747360601b8152915062000690565b602080825281016200033381620006dc565b806200036a565b80516101608301906200073584826200071a565b5060208201516200074a60208501826200071a565b5060408201516200075f60408501826200071a565b5060608201516200077460608501826200071a565b5060808201516200078960808501826200071a565b5060a08201516200079e60a08501826200071a565b5060c0820151620007b360c08501826200071a565b5060e0820151620007c860e08501826200071a565b50610100820151620007df6101008501826200064d565b50610120820151620007f66101208501826200071a565b506101408201516200080d6101408501826200064d565b50505050565b67ffffffffffffffff81166200036a565b805160e08301906200083784826200071a565b5060208201516200084c60208501826200071a565b5060408201516200086160408501826200071a565b5060608201516200087660608501826200071a565b5060808201516200088b60808501826200071a565b5060a0820151620008a060a08501826200064d565b5060c08201516200080d60c085018262000813565b6102c08101620008c682896200064d565b620008d560208301886200064d565b620008e460408301876200071a565b620008f3606083018662000721565b620009036101c083018562000824565b620009136102a08301846200071a565b979650505050505050565b602081016200033382846200071a565b6102a081016200093f82886200071a565b6200094e602083018762000721565b6200095e61018083018662000824565b6200096e6102608301856200064d565b6200097e6102808301846200064d565b969550505050505056fe60a0604052678ac7230489e8000060809081525060405162003c6238038062003c6283398101604081905262000035916200044a565b62000040336200014b565b50600193909355815160025560208083015160035560408084015160045560608085015160055560808086015160065560a08087015160075560c08088015160085560e0880151600955610100880151600a80546001600160a01b03199081166001600160a01b03938416179091556101208a0151600b5561014090990151600c80548b169183169190911790558751600d5595870151600e5593860151600f55918501516010558401516011558301516012805494909201519083166001600160e01b031990941693909317600160a01b6001600160401b039094168402179055601c805490931693169290921790556000805460ff60a01b1916909117905534601a55620004d2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805b8114620001a957600080fd5b50565b8051620001b9816200019b565b92915050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620001fd57620001fd620001bf565b6040525050565b60006200021060405190565b90506200021e8282620001d5565b919050565b60006001600160a01b038216620001b9565b6200019d8162000223565b8051620001b98162000235565b60006101608284031215620002655762000265600080fd5b6200027261016062000204565b90506000620002828484620001ac565b82525060206200029584848301620001ac565b6020830152506040620002ab84828501620001ac565b6040830152506060620002c184828501620001ac565b6060830152506080620002d784828501620001ac565b60808301525060a0620002ed84828501620001ac565b60a08301525060c06200030384828501620001ac565b60c08301525060e06200031984828501620001ac565b60e083015250610100620003308482850162000240565b610100830152506101206200034884828501620001ac565b61012083015250610140620003608482850162000240565b6101408301525092915050565b6001600160401b0381166200019d565b8051620001b9816200036d565b600060e08284031215620003a157620003a1600080fd5b620003ad60e062000204565b90506000620003bd8484620001ac565b8252506020620003d084848301620001ac565b6020830152506040620003e684828501620001ac565b6040830152506060620003fc84828501620001ac565b60608301525060806200041284828501620001ac565b60808301525060a0620004288482850162000240565b60a08301525060c06200043e848285016200037d565b60c08301525092915050565b60008060008060006102a08688031215620004685762000468600080fd5b6000620004768888620001ac565b955050602062000489888289016200024d565b9450506101806200049d888289016200038a565b935050610260620004b18882890162000240565b925050610280620004c58882890162000240565b9150509295509295909350565b60805161375f62000503600039600081816103b701528181610b3701528181610b650152611142015261375f6000f3fe60806040526004361061025c5760003560e01c806386f43a4111610144578063c424ddef116100b6578063eb0023521161007a578063eb002352146106eb578063ed07f59e14610700578063f08077ff14610721578063f2fde38b14610741578063f65b725014610761578063fc6d2cf71461077757600080fd5b8063c424ddef1461063b578063c9d5df0114610651578063d38a7aed14610667578063d77acecd1461067d578063e05ab2a71461069257600080fd5b8063995d0fe611610108578063995d0fe61461058a5780639d661b8b1461059f578063a78b1e07146105bf578063a902eb59146105d4578063b6b6a6ae146105f4578063c144b7971461062257600080fd5b806386f43a41146105115780638da5cb5b146105315780638e6d7f13146105575780638e73064f1461055f578063983d86451461057557600080fd5b80634bfc4583116101dd57806353501f8d116101a157806353501f8d1461043057806359aa6999146104505780636e4dadcd146104b2578063715018a6146104c7578063750142e6146104dc57806380d14868146104f157600080fd5b80634bfc4583146103855780634ccd44d3146103a55780634cf088d9146103d95780634e14eb28146103e15780634e3f2e481461041057600080fd5b80633146c2ab116102245780633146c2ab146103005780633a75c73a146103155780633d274a4e1461032b57806343d474491461035a5780634ad84b341461037057600080fd5b80630e0704461461026157806312065fe0146102835780631d442519146102a85780631da43a2c146102c85780632f6b5fc2146102ea575b600080fd5b34801561026d57600080fd5b5061028161027c36600461299c565b610797565b005b34801561028f57600080fd5b50475b60405161029f91906129e1565b60405180910390f35b3480156102b457600080fd5b506102816102c33660046129ef565b6108af565b3480156102d457600080fd5b506102dd610938565b60405161029f9190612a18565b3480156102f657600080fd5b5061029260155481565b34801561030c57600080fd5b50610281610970565b34801561032157600080fd5b5061029260015481565b34801561033757600080fd5b50610292610346366004612a26565b601660205280600052604060002054905081565b34801561036657600080fd5b5061029260195481565b34801561037c57600080fd5b50610292610a5f565b34801561039157600080fd5b506102816103a0366004612a26565b610a6f565b3480156103b157600080fd5b506102927f000000000000000000000000000000000000000000000000000000000000000081565b610281610a99565b3480156103ed57600080fd5b506102926103fc366004612a26565b601760205280600052604060002054905081565b34801561041c57600080fd5b5061028161042b3660046129ef565b610c79565b34801561043c57600080fd5b5061028161044b366004612a47565b610db0565b34801561045c57600080fd5b50600254600354600454600554600654600754600854600954600a54600b54600c5461049b9a99989796959493926001600160a01b039081169291168b565b60405161029f9b9a99989796959493929190612a72565b3480156104be57600080fd5b50610281610e6c565b3480156104d357600080fd5b50610281610f8a565b3480156104e857600080fd5b50610292610f9e565b3480156104fd57600080fd5b5061029261050c366004612a26565b610fa9565b34801561051d57600080fd5b5061028161052c3660046129ef565b61100d565b34801561053d57600080fd5b506000546001600160a01b031660405161029f9190612b16565b6102816112aa565b34801561056b57600080fd5b5061029260135481565b34801561058157600080fd5b506102816113ec565b34801561059657600080fd5b50610281611464565b3480156105ab57600080fd5b506102926105ba366004612a26565b6115ef565b3480156105cb57600080fd5b5061028161161b565b3480156105e057600080fd5b506102816105ef3660046129ef565b61165a565b34801561060057600080fd5b5060005461061590600160a01b900460ff1681565b60405161029f9190612b6d565b34801561062e57600080fd5b50600354601554146102dd565b34801561064757600080fd5b50610292601a5481565b34801561065d57600080fd5b5061029260145481565b34801561067357600080fd5b5061029260185481565b34801561068957600080fd5b506102816117b3565b34801561069e57600080fd5b50600d54600e54600f546010546011546012546106d89594939291906001600160a01b03811690600160a01b90046001600160401b031687565b60405161029f9796959493929190612b8a565b3480156106f757600080fd5b506102926118d1565b34801561070c57600080fd5b5060005461061590600160a81b900460ff1681565b34801561072d57600080fd5b5061028161073c3660046129ef565b6118dc565b34801561074d57600080fd5b5061028161075c366004612a26565b6119a1565b34801561076d57600080fd5b50610292601b5481565b34801561078357600080fd5b50610292610792366004612a26565b6119db565b6000811160405160408082019052600b81526a3830b930b69032b93937b960a91b6020820152906107e45760405162461bcd60e51b81526004016107db9190612c4e565b60405180910390fd5b506107ee336115ef565b81111561080d5760405162461bcd60e51b81526004016107db90612c96565b3360009081526017602052819060409020600082825461082d9190612cbc565b90915550506001600160a01b03821681156108fc0282604051600060405180830381858888f19350505050158015610869573d6000803e3d6000fd5b507f7864b76c7deb7badbb2677036e72bceede1f27ad5de801fedee080e9579e0ca2600154303385856040516108a3959493929190612ccf565b60405180910390a15050565b601c546001600160a01b031633146108d95760405162461bcd60e51b81526004016107db90612d33565b60035481111560405160408082019052600b81526a3830b930b69032b93937b960a91b60208201529061091f5760405162461bcd60e51b81526004016107db9190612c4e565b506000805460ff60a81b1916600160aa1b179055601955565b601c546000906001600160a01b031633146109655760405162461bcd60e51b81526004016107db90612d33565b506003546015541490565b600c546001600160a01b0316331461099a5760405162461bcd60e51b81526004016107db90612d6b565b6002600054600160a01b900460ff1660068111156109ba576109ba612b24565b146109d857604051633bb876f360e21b815260040160405180910390fd5b601254601054610a0d91600160a01b90046001600160401b0316906109fe906002612d7b565b610a089042612d9a565b611a22565b6000805460ff60a01b1916600360a01b1790556001547f232677777bd30fff3912b9961ead28df75f4cc82ea5fae5822c9fc748872cbb5903390604051610a55929190612dad565b60405180910390a1565b6000610a6a336115ef565b905090565b610a77611a97565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b6006544210610aba5760405162461bcd60e51b81526004016107db90612df5565b600354601554610acb903490612d9a565b1115610ae95760405162461bcd60e51b81526004016107db90612e39565b6003600054600160a01b900460ff166006811115610b0957610b09612b24565b14610b3557600054600160a01b900460ff1660405163e72a902d60e01b81526004016107db9190612b6d565b7f0000000000000000000000000000000000000000000000000000000000000000341015610be1576015546003547f000000000000000000000000000000000000000000000000000000000000000091610b8e91612cbc565b1015610bc857601554600354610ba49190612cbc565b3414610bc357604051632cae2ad960e11b815260040160405180910390fd5b610be1565b604051632cae2ad960e11b815260040160405180910390fd5b33600090815260166020523490604090206000828254610c019190612d9a565b925050819055503460156000828254610c1a9190612d9a565b909155505060035460155403610c42576000805460ff60a01b1916600560a01b179055426018555b7f7ab067f550c88e5ec26d40ef4b565a41d917a1bb2412aa89da3d2bed81e40518600154333034604051610a559493929190612e49565b610c81611a97565b6000811160405160408082019052600b81526a3830b930b69032b93937b960a91b602082015290610cc55760405162461bcd60e51b81526004016107db9190612c4e565b5060006064600260050154601454610cdd9190612d7b565b610ce79190612e94565b336000908152601760205290915082906040902054610d069083612cbc565b1015610d245760405162461bcd60e51b81526004016107db90612c96565b33600090815260176020528290604090206000828254610d449190612d9a565b9091555033905082156108fc0283604051600060405180830381858888f19350505050158015610d78573d6000803e3d6000fd5b507fe5da6d3d51ad16b594efd851e42b99c49fe19e4285f4823756ae022a60c643a06001543033856040516108a39493929190612e49565b601c546001600160a01b03163314610dda5760405162461bcd60e51b81526004016107db90612d33565b600082118015610de8575060015b60405160408082019052600b81526a3830b930b69032b93937b960a91b602082015290610e285760405162461bcd60e51b81526004016107db9190612c4e565b50610e338183612d9a565b60135560148290557fe006a6f9193fd67ca36d3f6f253c3dd54e1660078f25e3fe5f55d9cf090e4a6982826040516108a3929190612ea8565b610e74611a97565b600454601a541015610e985760405162461bcd60e51b81526004016107db90612ef7565b6004600054600160a01b900460ff166006811115610eb857610eb8612b24565b1480610ee157506006600054600160a01b900460ff166006811115610edf57610edf612b24565b145b15610f1e57600454339080156108fc0290604051600060405180830381858888f19350505050158015610f18573d6000803e3d6000fd5b50610f37565b604051639543369b60e01b815260040160405180910390fd5b600454601a8054600090610f4c908490612cbc565b90915550506001546004547fa3a6324388fc0c4f50a89eb79a6adccc6c13e8d02f33c7bae2aafdd73dad28db913391604051610a5593929190612f07565b610f92611a97565b610f9c6000611ac1565b565b6000610a6a336119db565b60006015546064600260060154601454601354610fc69190612cbc565b610fd09190612d7b565b6001600160a01b038516600090815260166020526040902054610ff39190612d7b565b610ffd9190612e94565b6110079190612e94565b92915050565b6003600054600160a01b900460ff16600681111561102d5761102d612b24565b148061105657506004600054600160a01b900460ff16600681111561105457611054612b24565b145b8061107e57506006600054600160a01b900460ff16600681111561107c5761107c612b24565b145b61109a5760405162461bcd60e51b81526004016107db90612f51565b336000908152601660205260408120541180156110c65750336000908152601660205260409020548111155b6110e25760405162461bcd60e51b81526004016107db90612f8c565b6012546001600160a01b0316331480156111175750601154336000908152601660205260409020546111149190612cbc565b81115b1561113557604051630c09958160e01b815260040160405180910390fd5b33600090815260166020527f000000000000000000000000000000000000000000000000000000000000000090829060409020546111739190612cbc565b101561119257604051632a8cb2f360e01b815260040160405180910390fd5b60065442108015906111a75750600354601554105b156111fa576000805460ff60a01b1916600360a11b1790556001547f33d89694c3e2cdd490ef5b39bb1f78b9a69af60d08af7b968c04236268d94eb4906040516111f191906129e1565b60405180910390a15b3360009081526016602052819060409020600082825461121a9190612cbc565b9250508190555080601560008282546112339190612cbc565b9091555033905081156108fc0282604051600060405180830381858888f19350505050158015611267573d6000803e3d6000fd5b507fb8ea0a09cf45416c38419b44df6e04defca30bdb2170c3f2fe0fbe59468ab71f60015433308460405161129f9493929190612e49565b60405180910390a150565b6001600054600160a01b900460ff1660068111156112ca576112ca612b24565b146112e75760405162461bcd60e51b81526004016107db90612fe6565b60115434146113085760405162461bcd60e51b81526004016107db9061302a565b6012546001600160a01b0316331460405160408082019052600d81526c2737903832b936b4b9b9b4b7b760991b6020820152906113585760405162461bcd60e51b81526004016107db9190612c4e565b5033600090815260166020526040902054156113865760405162461bcd60e51b81526004016107db9061306e565b336000908152601660205234906040902055346015819055601b8190556000805460ff60a01b1916600160a11b1790556001547ff4355201361cd9f345c33a3437a48a1185da6306d1b73e44bf4e74adf4d28656913390604051610a559392919061307e565b600f546113fc9062015180612d7b565b6018546114099190612d9a565b4210611423576000805460ff60a81b1916600160a91b1790555b6001546000547f9a781bbdc9dd3cba13fc1a809f3afa74fef9ec49e9a69545b7148535ed18d94f9190600160a81b900460ff16604051610a55929190613099565b601154601b5410156114885760405162461bcd60e51b81526004016107db906130f5565b6012546001600160a01b031633146114b25760405162461bcd60e51b81526004016107db90613132565b6004600054600160a01b900460ff1660068111156114d2576114d2612b24565b14806114fb57506006600054600160a01b900460ff1660068111156114f9576114f9612b24565b145b801561154b57506005600054600160a81b900460ff16600681111561152257611522612b24565b148061154b57506006600054600160a81b900460ff16600681111561154957611549612b24565b145b61156857604051632bfb1a3760e21b815260040160405180910390fd5b601154601b805460009061157d908490612cbc565b9091555050601154339080156108fc0290604051600060405180830381858888f193505050501580156115b4573d6000803e3d6000fd5b507f9f5878cc3fcae7b43b9f02949d5828c9b460972d7e2cd4d55cc7298850fd17ff33600154600d60040154604051610a5593929190612f07565b6001600160a01b038116600090815260176020526040812054611611836119db565b6110079190612cbc565b601c546001600160a01b031633146116455760405162461bcd60e51b81526004016107db90612d33565b6000805460ff60a81b1916600360a91b179055565b600c546001600160a01b031633146116845760405162461bcd60e51b81526004016107db90612d6b565b6000811160405160408082019052600b81526a3830b930b69032b93937b960a91b6020820152906116c85760405162461bcd60e51b81526004016107db9190612c4e565b50600060646002600701546014546116e09190612d7b565b6116ea9190612e94565b3360009081526017602052909150829060409020546117099083612cbc565b10156117275760405162461bcd60e51b81526004016107db90612c96565b336000908152601760205282906040902060008282546117479190612d9a565b9091555033905082156108fc0283604051600060405180830381858888f1935050505015801561177b573d6000803e3d6000fd5b507ff69d5b3f71f5b58e6d857275b7e97c5d65dbf6e797c3544b24c5764b9966f9a36001543033856040516108a39493929190612e49565b6117bb611a97565b6004600054600160a01b900460ff1660068111156117db576117db612b24565b106117f9576040516364cdea6d60e11b815260040160405180910390fd5b6000805460ff60a01b1916600160a21b179055601d546001546001600160a01b0390911690632acb1213906040518263ffffffff1660e01b815260040161184091906129e1565b6020604051808303816000875af115801561185f573d6000803e3d6000fd5b50505050604051601f3d908101601f191682016040526118829190810190613159565b61189e5760405162461bcd60e51b81526004016107db906131ae565b7f96bea66445b93064905ab9484bca37afea06fc23524c53a1f8ac18f76d193f3933600154604051610a55929190612dad565b6000610a6a33610fa9565b601c546001600160a01b031633146119065760405162461bcd60e51b81526004016107db90612d33565b4281111560405160408082019052600b81526a3830b930b69032b93937b960a91b60208201529061194a5760405162461bcd60e51b81526004016107db9190612c4e565b5060188190556000805460ff60a81b1916600160a81b908117918290556001547f9a781bbdc9dd3cba13fc1a809f3afa74fef9ec49e9a69545b7148535ed18d94f929091900460ff1660405161129f929190613099565b6119a9611a97565b6001600160a01b0381166119cf5760405162461bcd60e51b81526004016107db90613201565b6119d881611ac1565b50565b600060155460646002600601546014546119f59190612d7b565b6119ff9190612e94565b6001600160a01b038416600090815260166020526040902054610ffd9190612d7b565b611a2a6128dc565b611a35600019611b13565b6020820152600782900b6040820152611a4d30611b5f565b81527f4f585bbf0e07de94405f680838727b835429785b661a98e8361dc421599a63e78383604051611a8092919061325e565b60405180910390a1611a928382611ba8565b505050565b6000546001600160a01b03163314610f9c5760405162461bcd60e51b81526004016107db906132ab565b600080546001600160a01b038381166001600160a01b0319831681179093551690817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611b2e60405160408082019052606081526000602082015290565b6000611b3b836000611bf3565b90506040516040808201905280825181526020018260200151151590529392505050565b611b73604051602081016040526060815290565b604051806020016040528083604051602001611b8f91906132e3565b6040516020818303038152906040528152509050919050565b6000611bb382611c4b565b90506000611bcb84635d9dfc2c605185600080611d0a565b9050805115611bed57604051630e74990760e01b815260040160405180910390fd5b50505050565b611c19604051806060016040528060608152602001600015158152602001600081525090565b611c4483604051602001611c2d9190613309565b604051602081830303815290604052836000611d54565b9392505050565b6060600080611c5d8460200151611e29565b9050611c696003611f47565b611c739083612d9a565b9150611c80845151611f95565b611c8a9083612d9a565b9150611c9581611f95565b611c9f9083612d9a565b9150611cae8460400151611fad565b611cb89083612d9a565b91506000611cc583611ff0565b9050611cd2816003612010565b611cdf8551518290612020565b611ce98183612020565b611cf885604001518290612039565b611d0181612043565b95945050505050565b60606064876001600160401b03161015611d39578660405163a292827360e01b81526004016107db919061331e565b611d47878787878787612070565b90505b9695505050505050565b611d7a604051806060016040528060608152602001600015158152602001600081525090565b602084018451600059601f83161560018114611da857601f8416602090810380860184528301019250611db2565b6020820192508382525b508282848660046101c2fa506020815101810160405280515b60208114611df957600060208301511460018114611de95750611df9565b60208301925050601f1901611dcb565b81528452505050602081018390528115611e135781611e1d565b611e1d815161214c565b60408201529392505050565b60606000825151611e3b906001612d9a565b6001600160401b03811115611e5257611e5261332c565b604051818152601f19601f8301168101602001604052908015611e7c576020820181803683370190505b50905082602001511515600114611e94576000611e9a565b600160f81b5b81600081518110611ead57611ead613342565b60200101906001600160f81b031916908160001a905350600160005b845151811015611f3e5784518181518110611ee657611ee6613342565b60200101516001600160f81b031916838381518110611f0757611f07613342565b60200101906001600160f81b031916908160001a90535081611f2881613358565b9250508080611f3690613358565b915050611ec9565b50909392505050565b600060178211611f5957506001919050565b60ff8211611f6957506002919050565b61ffff8211611f7a57506003919050565b63ffffffff8211611f8d57506005919050565b506009919050565b60008151611fa38351611f47565b6110079190612d9a565b600081600781900b8213611fcd57611c44816001600160401b0316611f47565b611c44611fdc82600019613372565b6001600160401b0316611f47565b50919050565b611ff8612928565b61200381518361218a565b5060006020820152919050565b61201c82600483612207565b5050565b61202d826002835161220e565b611a928183519061232b565b61201c8282612352565b60608160200151156120675760405162461bcd60e51b81526004016107db906133d8565b81515192915050565b60606120836005607f60991b0184612380565b6000806005607f60991b0188868661209c57600061209f565b60015b8a8a8e6040516020016120b7969594939291906133e8565b6040516020818303038152906040526040516120d39190613471565b600060405180830381855af49150503d806000811461210e576040513d603f01601f191681016040523d815291503d6000602084013e612113565b606091505b50915091508161213657604051638a7db5bf60e01b815260040160405180910390fd5b61213f816123c8565b9998505050505050505050565b6000612157826124a7565b1561216457506000919050565b600060208301519050612176816124f0565b915060086020845103028201915050919050565b6121a560405160408082019052606081526000602082015290565b6121b060208361347d565b156121d8576121c060208361347d565b6121cb906020612cbc565b6121d59083612d9a565b91505b6020830182905260405180845260008152828101602001818110156121fc57600080fd5b604052509192915050565b611a928383835b6017816001600160401b03161161223457611bed60e0600584901b1682178451906126e5565b60ff816001600160401b0316116122755761225c6018611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600185519190612758565b61ffff816001600160401b0316116122b75761229e6019611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600285519190612758565b63ffffffff816001600160401b0316116122fb576122e2601a611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600485519190612758565b612312601b611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600885519190612758565b61234660405160408082019052606081526000602082015290565b611c44838384516127e7565b60008160070b126123695761201c8260008361220e565b61201c82600161237b84600019613372565b61220e565b47818110156123a6578082604051634787a10360e11b81526004016107db929190612ea8565b823f151580611bed5760405163064d954b60e41b815260040160405180910390fd5b6060600080806020850185518101906123e19190613594565b919450925090506001600160401b03821661241b5780511561241657604051630e74990760e01b815260040160405180910390fd5b61247e565b6001600160401b0382166051148061243c57506001600160401b0382166071145b1561246357805160000361241657604051630e74990760e01b815260040160405180910390fd5b8160405163f1f6bced60e01b81526004016107db91906135fe565b821561249f578260405163d4bb667160e01b81526004016107db91906129e1565b949350505050565b60008060208301815b84518110156124e5578151925082156124ce57506000949350505050565b6020918201916124de9082612d9a565b90506124b0565b506001949350505050565b60008115600181146126dc57600160801b68010000000000000000640100000000620100006101006010600460026000198b019081041790810417908104179081041790810417908104179081041790810417600101926040517ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd81527ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe60208201527ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a827252361660408201527fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff60608201527ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e60808201527fe39ed557db96902cd38ed14fad815115c786af479b7e8324736353433727170760a08201527fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d236242260660c08201527f753a6d1b65325d0c552a4d1345224105391a310b29122104190a11030902010060e082015261010081016040527e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff600160f81b8082880204818160ff0385015104600160ff1b861161010002019650600019850185166126d2576001870196505b5050505050611fea565b50600092915050565b61270060405160408082019052606081526000602082015290565b600083515190506000612714826001612d9a565b9050846020015182106127355761273585612730836002612d7b565b6128c1565b8451602083820101858153815183111561274d578282525b509495945050505050565b61277360405160408082019052606081526000602082015290565b6000845151905060006127868285612d9a565b905085602001518111156127a3576127a386612730836002612d7b565b600060016127b38661010061371a565b6127bd9190612cbc565b9050865182810187831982511617815281518411156127da578382525b5096979650505050505050565b61280260405160408082019052606081526000602082015290565b825182111561281057600080fd5b6000845151905060006128238483612d9a565b905085602001518111156128405761284086612730836002612d7b565b6000808751805185602083010193508085111561285b578482525b505050602086015b6020861061289b578051825261287a602083612d9a565b9150612887602082612d9a565b9050612894602087612cbc565b9550612863565b60001960208790036101000a018019825116818451161790925250959695505050505050565b6000825190506128d1838361218a565b50611bed838261232b565b60405180606001604052806128fb604051602081016040526060815290565b815260200161291b60405160408082019052606081526000602082015290565b8152600060209091015290565b604051806040016040528061294e60405160408082019052606081526000602082015290565b8152602001600081525090565b60006001600160a01b038216611007565b6129758161295b565b81146119d857600080fd5b80356110078161296c565b80612975565b80356110078161298b565b600080604083850312156129b2576129b2600080fd5b60006129be8585612980565b92505060206129cf85828601612991565b9150509250929050565b805b82525050565b6020810161100782846129d9565b600060208284031215612a0457612a04600080fd5b600061249f8484612991565b8015156129db565b602081016110078284612a10565b600060208284031215612a3b57612a3b600080fd5b600061249f8484612980565b60008060408385031215612a5d57612a5d600080fd5b60006129be8585612991565b6129db8161295b565b6101608101612a81828e6129d9565b612a8e602083018d6129d9565b612a9b604083018c6129d9565b612aa8606083018b6129d9565b612ab5608083018a6129d9565b612ac260a08301896129d9565b612acf60c08301886129d9565b612adc60e08301876129d9565b612aea610100830186612a69565b612af86101208301856129d9565b612b06610140830184612a69565b9c9b505050505050505050505050565b602081016110078284612a69565b634e487b7160e01b600052602160045260246000fd5b600781106119d8576119d8612b24565b80612b5481612b3a565b919050565b600061100782612b4a565b6129db81612b59565b602081016110078284612b64565b6001600160401b0381166129db565b60e08101612b98828a6129d9565b612ba560208301896129d9565b612bb260408301886129d9565b612bbf60608301876129d9565b612bcc60808301866129d9565b612bd960a0830185612a69565b612be660c0830184612b7b565b98975050505050505050565b60005b83811015612c0d578082015183820152602001612bf5565b50506000910152565b6000612c26826000815192915050565b808452602084019350612c3d818560208601612bf2565b601f01601f19169290920192915050565b60208082528101611c448184612c16565b601b81526000602082017f72657761726420496e73756666696369656e742062616c616e63650000000000815291505b5060200190565b6020808252810161100781612c5f565b634e487b7160e01b600052601160045260246000fd5b8181038181111561100757611007612ca6565b60a08101612cdd82886129d9565b612cea6020830187612a69565b612cf76040830186612a69565b612d046060830185612a69565b611d4a60808301846129d9565b600b81526000602082016a2737ba1036b0b730b3b2b960a91b81529150612c8f565b6020808252810161100781612d11565b60118152600060208201702737ba1039b2b93b32b91039b4b3b732b960791b81529150612c8f565b6020808252810161100781612d43565b818102808215838204851417612d9357612d93612ca6565b5092915050565b8082018082111561100757611007612ca6565b60408101612dbb8285612a69565b611c4460208301846129d9565b601681526000602082017514985a5cd9481c1b185b881a185cc8195e1c1a5c995960521b81529150612c8f565b6020808252810161100781612dc8565b601b81526000602082017f4d6f7265207468616e20746865206e756d62657220726169736564000000000081529150612c8f565b6020808252810161100781612e05565b60808101612e5782876129d9565b612e646020830186612a69565b612e716040830185612a69565b611d0160608301846129d9565b634e487b7160e01b600052601260045260246000fd5b600082612ea357612ea3612e7e565b500490565b60408101612dbb82856129d9565b602181526000602082017f736563757269747946756e6420496e73756666696369656e742062616c616e638152606560f81b602082015291505b5060400190565b6020808252810161100781612eb6565b60608101612f158286612a69565b612f2260208301856129d9565b61249f60408301846129d9565b600b81526000602082016a57726f6e6720737461746560a81b81529150612c8f565b6020808252810161100781612f2f565b6014815260006020820173496e73756666696369656e742062616c616e636560601b81529150612c8f565b6020808252810161100781612f61565b602d81526000602082017f5261697365207374617465206d7573742062652057616974696e675061794f5081526c14d4d958dd5c9a5d1e519d5b99609a1b60208201529150612ef0565b6020808252810161100781612f9c565b601781526000602082017f57726f6e67206f70732073656375726974792066756e6400000000000000000081529150612c8f565b6020808252810161100781612ff6565b601d81526000602082017f4f5053536563757269747946756e6420686173206265656e207061696400000081529150612c8f565b602080825281016110078161303a565b6060810161308c82866129d9565b612f226020830185612a69565b604081016130a782856129d9565b611c446020830184612b64565b602481526000602082017f6f7073536563757269747946756e6420496e73756666696369656e742062616c815263616e636560e01b60208201529150612ef0565b60208082528101611007816130b4565b601681526000602082017557726f6e67207769746864726177206164647265737360501b81529150612c8f565b6020808252810161100781613105565b801515612975565b60008151905061100781613142565b60006020828403121561316e5761316e600080fd5b600061249f848461314a565b601781526000602082017f636c6f736520726169736520706c616e206661696c656400000000000000000081529150612c8f565b602080825281016110078161317a565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612ef0565b60208082528101611007816131be565b60006110076001600160401b038316613228565b90565b6001600160401b031690565b6129db81613211565b600061100761324f6132258460070b90565b60070b90565b6129db8161323d565b6040810161326c8285613234565b611c446020830184613255565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612c8f565b6020808252810161100781613279565b60006110078260601b90565b6000611007826132bb565b6129db6132de8261295b565b6132c7565b61020560f11b815260020160006132fa82846132d2565b50601401919050565b806129db565b60006133158284613303565b50602001919050565b602081016110078284613234565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019820361336b5761336b612ca6565b5060010190565b600061337e8260070b90565b915061338a8360070b90565b925050818103677fffffffffffffff198112677fffffffffffffff8213171561100757611007612ca6565b600c81526000602082016b24b73b30b634b21021a127a960a11b81529150612c8f565b60208082528101611007816133b5565b60c081016133f68289612b7b565b61340360208301886129d9565b6134106040830187612b7b565b61341d6060830186612b7b565b818103608083015261342f8185612c16565b905061343e60a0830184613234565b979650505050505050565b6000613459826000815192915050565b613467818560208601612bf2565b9290920192915050565b6000611c448284613449565b60008261348c5761348c612e7e565b500690565b6000815190506110078161298b565b6001600160401b038116612975565b600081519050611007816134a0565b601f19601f83011681018181106001600160401b03821117156134e3576134e361332c565b6040525050565b60006134f96000604051905090565b9050612b5482826134be565b60006001600160401b0382111561351e5761351e61332c565b601f19601f83011660200192915050565b600061354261353d84613505565b6134ea565b90508281526020810184848401111561355d5761355d600080fd5b613568848285612bf2565b509392505050565b600082601f83011261358457613584600080fd5b815161249f84826020860161352f565b6000806000606084860312156135ac576135ac600080fd5b60006135b88686613491565b93505060206135c9868287016134af565b92505060408401516001600160401b038111156135e8576135e8600080fd5b6135f486828701613570565b9150509250925092565b602081016110078284612b7b565b80825b600185111561364b5780860481111561362a5761362a612ca6565b600185161561363857908102905b80026136448560011c90565b945061360f565b94509492505050565b60008261366357506001611c44565b8161367057506000611c44565b81600181146136865760028114613690576136bd565b6001915050611c44565b60ff8411156136a1576136a1612ca6565b8360020a9150848211156136b7576136b7612ca6565b50611c44565b5060208310610133831016604e8410600b84101617156136f0575081810a838111156136eb576136eb612ca6565b611c44565b6136fd848484600161360c565b9250905081840481111561371357613713612ca6565b0292915050565b6000611c44600019848461365456fea264697066735822122056b72f215facb61186c797a7eb9bb307379f2d7f0ba7045dd315ed1fe9bc54d564736f6c63430008110033a2646970667358221220c411b68a019d674a1e7718aba0c31a7706cdc64e3af79efa38453a85192624ba64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106200002c5760003560e01c80632acb121314620000315780637f186289146200006e575b600080fd5b3480156200003e57600080fd5b50620000566200005036600462000339565b62000094565b60405162000065919062000370565b60405180910390f35b620000856200007f36600462000608565b62000177565b60405162000065919062000658565b6000620000a062000254565b600082815260036020908152604091829020825160808101845281546001600160a01b03808216808452600160a01b90920467ffffffffffffffff16948301949094526001830154948201949094526002909101549091166060820152903214620001285760405162461bcd60e51b81526004016200011f9062000697565b60405180910390fd5b6020808201805167ffffffffffffffff9081166000908152600284526040808220829055925190911681526001808452828220929094015182548086018455928252929020015590505b919050565b60006200018362000254565b60008081546200019390620006bf565b9182905550835260c082015167ffffffffffffffff1660009081526002602052604090205415620001d85760405162461bcd60e51b81526004016200011f9062000708565b620002076000808154620001ec90620006bf565b9182905550600454859085906001600160a01b03166200028c565b83516040519192507f8a51504c49dde652010a8d3604828c604531f85a17f8515bf0b82f59d625177991620002469184913391349189918991620008b5565b60405180910390a192915050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200028a57600080fd5b565b60008054604051602001620002a291906200091e565b60405160208183030381529060405280519060200120348686868630604051620002cc9062000307565b620002dc9594939291906200092e565b82906040518091039083f591505080158015620002fd573d6000803e3d6000fd5b5095945050505050565b613c62806200098983390190565b805b81146200032357600080fd5b50565b8035620003338162000315565b92915050565b600060208284031215620003505762000350600080fd5b60006200035e848462000326565b949350505050565b8015155b82525050565b6020810162000333828462000366565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715620003bf57620003bf62000380565b6040525050565b6000620003d260405190565b905062000172828262000396565b60006001600160a01b03821662000333565b6200031781620003e0565b80356200033381620003f2565b60006101608284031215620004225762000422600080fd5b6200042f610160620003c6565b905060006200043f848462000326565b8252506020620004528484830162000326565b6020830152506040620004688482850162000326565b60408301525060606200047e8482850162000326565b6060830152506080620004948482850162000326565b60808301525060a0620004aa8482850162000326565b60a08301525060c0620004c08482850162000326565b60c08301525060e0620004d68482850162000326565b60e083015250610100620004ed84828501620003fd565b61010083015250610120620005058482850162000326565b610120830152506101406200051d84828501620003fd565b6101408301525092915050565b67ffffffffffffffff811662000317565b803562000333816200052a565b600060e082840312156200055f576200055f600080fd5b6200056b60e0620003c6565b905060006200057b848462000326565b82525060206200058e8484830162000326565b6020830152506040620005a48482850162000326565b6040830152506060620005ba8482850162000326565b6060830152506080620005d08482850162000326565b60808301525060a0620005e684828501620003fd565b60a08301525060c0620005fc848285016200053b565b60c08301525092915050565b6000806102408385031215620006215762000621600080fd5b60006200062f85856200040a565b925050610160620006438582860162000548565b9150509250929050565b6200036a81620003e0565b602081016200033382846200064d565b601581526000602082017422a7222fa82620a72fa7a924a3a4a72fa2a92927a960591b815291505b5060200190565b60208082528101620003338162000668565b634e487b7160e01b600052601160045260246000fd5b60006000198203620006d557620006d5620006a9565b5060010190565b60148152600060208201736d696e657220616c72656164792065786973747360601b8152915062000690565b602080825281016200033381620006dc565b806200036a565b80516101608301906200073584826200071a565b5060208201516200074a60208501826200071a565b5060408201516200075f60408501826200071a565b5060608201516200077460608501826200071a565b5060808201516200078960808501826200071a565b5060a08201516200079e60a08501826200071a565b5060c0820151620007b360c08501826200071a565b5060e0820151620007c860e08501826200071a565b50610100820151620007df6101008501826200064d565b50610120820151620007f66101208501826200071a565b506101408201516200080d6101408501826200064d565b50505050565b67ffffffffffffffff81166200036a565b805160e08301906200083784826200071a565b5060208201516200084c60208501826200071a565b5060408201516200086160408501826200071a565b5060608201516200087660608501826200071a565b5060808201516200088b60808501826200071a565b5060a0820151620008a060a08501826200064d565b5060c08201516200080d60c085018262000813565b6102c08101620008c682896200064d565b620008d560208301886200064d565b620008e460408301876200071a565b620008f3606083018662000721565b620009036101c083018562000824565b620009136102a08301846200071a565b979650505050505050565b602081016200033382846200071a565b6102a081016200093f82886200071a565b6200094e602083018762000721565b6200095e61018083018662000824565b6200096e6102608301856200064d565b6200097e6102808301846200064d565b969550505050505056fe60a0604052678ac7230489e8000060809081525060405162003c6238038062003c6283398101604081905262000035916200044a565b62000040336200014b565b50600193909355815160025560208083015160035560408084015160045560608085015160055560808086015160065560a08087015160075560c08088015160085560e0880151600955610100880151600a80546001600160a01b03199081166001600160a01b03938416179091556101208a0151600b5561014090990151600c80548b169183169190911790558751600d5595870151600e5593860151600f55918501516010558401516011558301516012805494909201519083166001600160e01b031990941693909317600160a01b6001600160401b039094168402179055601c805490931693169290921790556000805460ff60a01b1916909117905534601a55620004d2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805b8114620001a957600080fd5b50565b8051620001b9816200019b565b92915050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620001fd57620001fd620001bf565b6040525050565b60006200021060405190565b90506200021e8282620001d5565b919050565b60006001600160a01b038216620001b9565b6200019d8162000223565b8051620001b98162000235565b60006101608284031215620002655762000265600080fd5b6200027261016062000204565b90506000620002828484620001ac565b82525060206200029584848301620001ac565b6020830152506040620002ab84828501620001ac565b6040830152506060620002c184828501620001ac565b6060830152506080620002d784828501620001ac565b60808301525060a0620002ed84828501620001ac565b60a08301525060c06200030384828501620001ac565b60c08301525060e06200031984828501620001ac565b60e083015250610100620003308482850162000240565b610100830152506101206200034884828501620001ac565b61012083015250610140620003608482850162000240565b6101408301525092915050565b6001600160401b0381166200019d565b8051620001b9816200036d565b600060e08284031215620003a157620003a1600080fd5b620003ad60e062000204565b90506000620003bd8484620001ac565b8252506020620003d084848301620001ac565b6020830152506040620003e684828501620001ac565b6040830152506060620003fc84828501620001ac565b60608301525060806200041284828501620001ac565b60808301525060a0620004288482850162000240565b60a08301525060c06200043e848285016200037d565b60c08301525092915050565b60008060008060006102a08688031215620004685762000468600080fd5b6000620004768888620001ac565b955050602062000489888289016200024d565b9450506101806200049d888289016200038a565b935050610260620004b18882890162000240565b925050610280620004c58882890162000240565b9150509295509295909350565b60805161375f62000503600039600081816103b701528181610b3701528181610b650152611142015261375f6000f3fe60806040526004361061025c5760003560e01c806386f43a4111610144578063c424ddef116100b6578063eb0023521161007a578063eb002352146106eb578063ed07f59e14610700578063f08077ff14610721578063f2fde38b14610741578063f65b725014610761578063fc6d2cf71461077757600080fd5b8063c424ddef1461063b578063c9d5df0114610651578063d38a7aed14610667578063d77acecd1461067d578063e05ab2a71461069257600080fd5b8063995d0fe611610108578063995d0fe61461058a5780639d661b8b1461059f578063a78b1e07146105bf578063a902eb59146105d4578063b6b6a6ae146105f4578063c144b7971461062257600080fd5b806386f43a41146105115780638da5cb5b146105315780638e6d7f13146105575780638e73064f1461055f578063983d86451461057557600080fd5b80634bfc4583116101dd57806353501f8d116101a157806353501f8d1461043057806359aa6999146104505780636e4dadcd146104b2578063715018a6146104c7578063750142e6146104dc57806380d14868146104f157600080fd5b80634bfc4583146103855780634ccd44d3146103a55780634cf088d9146103d95780634e14eb28146103e15780634e3f2e481461041057600080fd5b80633146c2ab116102245780633146c2ab146103005780633a75c73a146103155780633d274a4e1461032b57806343d474491461035a5780634ad84b341461037057600080fd5b80630e0704461461026157806312065fe0146102835780631d442519146102a85780631da43a2c146102c85780632f6b5fc2146102ea575b600080fd5b34801561026d57600080fd5b5061028161027c36600461299c565b610797565b005b34801561028f57600080fd5b50475b60405161029f91906129e1565b60405180910390f35b3480156102b457600080fd5b506102816102c33660046129ef565b6108af565b3480156102d457600080fd5b506102dd610938565b60405161029f9190612a18565b3480156102f657600080fd5b5061029260155481565b34801561030c57600080fd5b50610281610970565b34801561032157600080fd5b5061029260015481565b34801561033757600080fd5b50610292610346366004612a26565b601660205280600052604060002054905081565b34801561036657600080fd5b5061029260195481565b34801561037c57600080fd5b50610292610a5f565b34801561039157600080fd5b506102816103a0366004612a26565b610a6f565b3480156103b157600080fd5b506102927f000000000000000000000000000000000000000000000000000000000000000081565b610281610a99565b3480156103ed57600080fd5b506102926103fc366004612a26565b601760205280600052604060002054905081565b34801561041c57600080fd5b5061028161042b3660046129ef565b610c79565b34801561043c57600080fd5b5061028161044b366004612a47565b610db0565b34801561045c57600080fd5b50600254600354600454600554600654600754600854600954600a54600b54600c5461049b9a99989796959493926001600160a01b039081169291168b565b60405161029f9b9a99989796959493929190612a72565b3480156104be57600080fd5b50610281610e6c565b3480156104d357600080fd5b50610281610f8a565b3480156104e857600080fd5b50610292610f9e565b3480156104fd57600080fd5b5061029261050c366004612a26565b610fa9565b34801561051d57600080fd5b5061028161052c3660046129ef565b61100d565b34801561053d57600080fd5b506000546001600160a01b031660405161029f9190612b16565b6102816112aa565b34801561056b57600080fd5b5061029260135481565b34801561058157600080fd5b506102816113ec565b34801561059657600080fd5b50610281611464565b3480156105ab57600080fd5b506102926105ba366004612a26565b6115ef565b3480156105cb57600080fd5b5061028161161b565b3480156105e057600080fd5b506102816105ef3660046129ef565b61165a565b34801561060057600080fd5b5060005461061590600160a01b900460ff1681565b60405161029f9190612b6d565b34801561062e57600080fd5b50600354601554146102dd565b34801561064757600080fd5b50610292601a5481565b34801561065d57600080fd5b5061029260145481565b34801561067357600080fd5b5061029260185481565b34801561068957600080fd5b506102816117b3565b34801561069e57600080fd5b50600d54600e54600f546010546011546012546106d89594939291906001600160a01b03811690600160a01b90046001600160401b031687565b60405161029f9796959493929190612b8a565b3480156106f757600080fd5b506102926118d1565b34801561070c57600080fd5b5060005461061590600160a81b900460ff1681565b34801561072d57600080fd5b5061028161073c3660046129ef565b6118dc565b34801561074d57600080fd5b5061028161075c366004612a26565b6119a1565b34801561076d57600080fd5b50610292601b5481565b34801561078357600080fd5b50610292610792366004612a26565b6119db565b6000811160405160408082019052600b81526a3830b930b69032b93937b960a91b6020820152906107e45760405162461bcd60e51b81526004016107db9190612c4e565b60405180910390fd5b506107ee336115ef565b81111561080d5760405162461bcd60e51b81526004016107db90612c96565b3360009081526017602052819060409020600082825461082d9190612cbc565b90915550506001600160a01b03821681156108fc0282604051600060405180830381858888f19350505050158015610869573d6000803e3d6000fd5b507f7864b76c7deb7badbb2677036e72bceede1f27ad5de801fedee080e9579e0ca2600154303385856040516108a3959493929190612ccf565b60405180910390a15050565b601c546001600160a01b031633146108d95760405162461bcd60e51b81526004016107db90612d33565b60035481111560405160408082019052600b81526a3830b930b69032b93937b960a91b60208201529061091f5760405162461bcd60e51b81526004016107db9190612c4e565b506000805460ff60a81b1916600160aa1b179055601955565b601c546000906001600160a01b031633146109655760405162461bcd60e51b81526004016107db90612d33565b506003546015541490565b600c546001600160a01b0316331461099a5760405162461bcd60e51b81526004016107db90612d6b565b6002600054600160a01b900460ff1660068111156109ba576109ba612b24565b146109d857604051633bb876f360e21b815260040160405180910390fd5b601254601054610a0d91600160a01b90046001600160401b0316906109fe906002612d7b565b610a089042612d9a565b611a22565b6000805460ff60a01b1916600360a01b1790556001547f232677777bd30fff3912b9961ead28df75f4cc82ea5fae5822c9fc748872cbb5903390604051610a55929190612dad565b60405180910390a1565b6000610a6a336115ef565b905090565b610a77611a97565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b6006544210610aba5760405162461bcd60e51b81526004016107db90612df5565b600354601554610acb903490612d9a565b1115610ae95760405162461bcd60e51b81526004016107db90612e39565b6003600054600160a01b900460ff166006811115610b0957610b09612b24565b14610b3557600054600160a01b900460ff1660405163e72a902d60e01b81526004016107db9190612b6d565b7f0000000000000000000000000000000000000000000000000000000000000000341015610be1576015546003547f000000000000000000000000000000000000000000000000000000000000000091610b8e91612cbc565b1015610bc857601554600354610ba49190612cbc565b3414610bc357604051632cae2ad960e11b815260040160405180910390fd5b610be1565b604051632cae2ad960e11b815260040160405180910390fd5b33600090815260166020523490604090206000828254610c019190612d9a565b925050819055503460156000828254610c1a9190612d9a565b909155505060035460155403610c42576000805460ff60a01b1916600560a01b179055426018555b7f7ab067f550c88e5ec26d40ef4b565a41d917a1bb2412aa89da3d2bed81e40518600154333034604051610a559493929190612e49565b610c81611a97565b6000811160405160408082019052600b81526a3830b930b69032b93937b960a91b602082015290610cc55760405162461bcd60e51b81526004016107db9190612c4e565b5060006064600260050154601454610cdd9190612d7b565b610ce79190612e94565b336000908152601760205290915082906040902054610d069083612cbc565b1015610d245760405162461bcd60e51b81526004016107db90612c96565b33600090815260176020528290604090206000828254610d449190612d9a565b9091555033905082156108fc0283604051600060405180830381858888f19350505050158015610d78573d6000803e3d6000fd5b507fe5da6d3d51ad16b594efd851e42b99c49fe19e4285f4823756ae022a60c643a06001543033856040516108a39493929190612e49565b601c546001600160a01b03163314610dda5760405162461bcd60e51b81526004016107db90612d33565b600082118015610de8575060015b60405160408082019052600b81526a3830b930b69032b93937b960a91b602082015290610e285760405162461bcd60e51b81526004016107db9190612c4e565b50610e338183612d9a565b60135560148290557fe006a6f9193fd67ca36d3f6f253c3dd54e1660078f25e3fe5f55d9cf090e4a6982826040516108a3929190612ea8565b610e74611a97565b600454601a541015610e985760405162461bcd60e51b81526004016107db90612ef7565b6004600054600160a01b900460ff166006811115610eb857610eb8612b24565b1480610ee157506006600054600160a01b900460ff166006811115610edf57610edf612b24565b145b15610f1e57600454339080156108fc0290604051600060405180830381858888f19350505050158015610f18573d6000803e3d6000fd5b50610f37565b604051639543369b60e01b815260040160405180910390fd5b600454601a8054600090610f4c908490612cbc565b90915550506001546004547fa3a6324388fc0c4f50a89eb79a6adccc6c13e8d02f33c7bae2aafdd73dad28db913391604051610a5593929190612f07565b610f92611a97565b610f9c6000611ac1565b565b6000610a6a336119db565b60006015546064600260060154601454601354610fc69190612cbc565b610fd09190612d7b565b6001600160a01b038516600090815260166020526040902054610ff39190612d7b565b610ffd9190612e94565b6110079190612e94565b92915050565b6003600054600160a01b900460ff16600681111561102d5761102d612b24565b148061105657506004600054600160a01b900460ff16600681111561105457611054612b24565b145b8061107e57506006600054600160a01b900460ff16600681111561107c5761107c612b24565b145b61109a5760405162461bcd60e51b81526004016107db90612f51565b336000908152601660205260408120541180156110c65750336000908152601660205260409020548111155b6110e25760405162461bcd60e51b81526004016107db90612f8c565b6012546001600160a01b0316331480156111175750601154336000908152601660205260409020546111149190612cbc565b81115b1561113557604051630c09958160e01b815260040160405180910390fd5b33600090815260166020527f000000000000000000000000000000000000000000000000000000000000000090829060409020546111739190612cbc565b101561119257604051632a8cb2f360e01b815260040160405180910390fd5b60065442108015906111a75750600354601554105b156111fa576000805460ff60a01b1916600360a11b1790556001547f33d89694c3e2cdd490ef5b39bb1f78b9a69af60d08af7b968c04236268d94eb4906040516111f191906129e1565b60405180910390a15b3360009081526016602052819060409020600082825461121a9190612cbc565b9250508190555080601560008282546112339190612cbc565b9091555033905081156108fc0282604051600060405180830381858888f19350505050158015611267573d6000803e3d6000fd5b507fb8ea0a09cf45416c38419b44df6e04defca30bdb2170c3f2fe0fbe59468ab71f60015433308460405161129f9493929190612e49565b60405180910390a150565b6001600054600160a01b900460ff1660068111156112ca576112ca612b24565b146112e75760405162461bcd60e51b81526004016107db90612fe6565b60115434146113085760405162461bcd60e51b81526004016107db9061302a565b6012546001600160a01b0316331460405160408082019052600d81526c2737903832b936b4b9b9b4b7b760991b6020820152906113585760405162461bcd60e51b81526004016107db9190612c4e565b5033600090815260166020526040902054156113865760405162461bcd60e51b81526004016107db9061306e565b336000908152601660205234906040902055346015819055601b8190556000805460ff60a01b1916600160a11b1790556001547ff4355201361cd9f345c33a3437a48a1185da6306d1b73e44bf4e74adf4d28656913390604051610a559392919061307e565b600f546113fc9062015180612d7b565b6018546114099190612d9a565b4210611423576000805460ff60a81b1916600160a91b1790555b6001546000547f9a781bbdc9dd3cba13fc1a809f3afa74fef9ec49e9a69545b7148535ed18d94f9190600160a81b900460ff16604051610a55929190613099565b601154601b5410156114885760405162461bcd60e51b81526004016107db906130f5565b6012546001600160a01b031633146114b25760405162461bcd60e51b81526004016107db90613132565b6004600054600160a01b900460ff1660068111156114d2576114d2612b24565b14806114fb57506006600054600160a01b900460ff1660068111156114f9576114f9612b24565b145b801561154b57506005600054600160a81b900460ff16600681111561152257611522612b24565b148061154b57506006600054600160a81b900460ff16600681111561154957611549612b24565b145b61156857604051632bfb1a3760e21b815260040160405180910390fd5b601154601b805460009061157d908490612cbc565b9091555050601154339080156108fc0290604051600060405180830381858888f193505050501580156115b4573d6000803e3d6000fd5b507f9f5878cc3fcae7b43b9f02949d5828c9b460972d7e2cd4d55cc7298850fd17ff33600154600d60040154604051610a5593929190612f07565b6001600160a01b038116600090815260176020526040812054611611836119db565b6110079190612cbc565b601c546001600160a01b031633146116455760405162461bcd60e51b81526004016107db90612d33565b6000805460ff60a81b1916600360a91b179055565b600c546001600160a01b031633146116845760405162461bcd60e51b81526004016107db90612d6b565b6000811160405160408082019052600b81526a3830b930b69032b93937b960a91b6020820152906116c85760405162461bcd60e51b81526004016107db9190612c4e565b50600060646002600701546014546116e09190612d7b565b6116ea9190612e94565b3360009081526017602052909150829060409020546117099083612cbc565b10156117275760405162461bcd60e51b81526004016107db90612c96565b336000908152601760205282906040902060008282546117479190612d9a565b9091555033905082156108fc0283604051600060405180830381858888f1935050505015801561177b573d6000803e3d6000fd5b507ff69d5b3f71f5b58e6d857275b7e97c5d65dbf6e797c3544b24c5764b9966f9a36001543033856040516108a39493929190612e49565b6117bb611a97565b6004600054600160a01b900460ff1660068111156117db576117db612b24565b106117f9576040516364cdea6d60e11b815260040160405180910390fd5b6000805460ff60a01b1916600160a21b179055601d546001546001600160a01b0390911690632acb1213906040518263ffffffff1660e01b815260040161184091906129e1565b6020604051808303816000875af115801561185f573d6000803e3d6000fd5b50505050604051601f3d908101601f191682016040526118829190810190613159565b61189e5760405162461bcd60e51b81526004016107db906131ae565b7f96bea66445b93064905ab9484bca37afea06fc23524c53a1f8ac18f76d193f3933600154604051610a55929190612dad565b6000610a6a33610fa9565b601c546001600160a01b031633146119065760405162461bcd60e51b81526004016107db90612d33565b4281111560405160408082019052600b81526a3830b930b69032b93937b960a91b60208201529061194a5760405162461bcd60e51b81526004016107db9190612c4e565b5060188190556000805460ff60a81b1916600160a81b908117918290556001547f9a781bbdc9dd3cba13fc1a809f3afa74fef9ec49e9a69545b7148535ed18d94f929091900460ff1660405161129f929190613099565b6119a9611a97565b6001600160a01b0381166119cf5760405162461bcd60e51b81526004016107db90613201565b6119d881611ac1565b50565b600060155460646002600601546014546119f59190612d7b565b6119ff9190612e94565b6001600160a01b038416600090815260166020526040902054610ffd9190612d7b565b611a2a6128dc565b611a35600019611b13565b6020820152600782900b6040820152611a4d30611b5f565b81527f4f585bbf0e07de94405f680838727b835429785b661a98e8361dc421599a63e78383604051611a8092919061325e565b60405180910390a1611a928382611ba8565b505050565b6000546001600160a01b03163314610f9c5760405162461bcd60e51b81526004016107db906132ab565b600080546001600160a01b038381166001600160a01b0319831681179093551690817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611b2e60405160408082019052606081526000602082015290565b6000611b3b836000611bf3565b90506040516040808201905280825181526020018260200151151590529392505050565b611b73604051602081016040526060815290565b604051806020016040528083604051602001611b8f91906132e3565b6040516020818303038152906040528152509050919050565b6000611bb382611c4b565b90506000611bcb84635d9dfc2c605185600080611d0a565b9050805115611bed57604051630e74990760e01b815260040160405180910390fd5b50505050565b611c19604051806060016040528060608152602001600015158152602001600081525090565b611c4483604051602001611c2d9190613309565b604051602081830303815290604052836000611d54565b9392505050565b6060600080611c5d8460200151611e29565b9050611c696003611f47565b611c739083612d9a565b9150611c80845151611f95565b611c8a9083612d9a565b9150611c9581611f95565b611c9f9083612d9a565b9150611cae8460400151611fad565b611cb89083612d9a565b91506000611cc583611ff0565b9050611cd2816003612010565b611cdf8551518290612020565b611ce98183612020565b611cf885604001518290612039565b611d0181612043565b95945050505050565b60606064876001600160401b03161015611d39578660405163a292827360e01b81526004016107db919061331e565b611d47878787878787612070565b90505b9695505050505050565b611d7a604051806060016040528060608152602001600015158152602001600081525090565b602084018451600059601f83161560018114611da857601f8416602090810380860184528301019250611db2565b6020820192508382525b508282848660046101c2fa506020815101810160405280515b60208114611df957600060208301511460018114611de95750611df9565b60208301925050601f1901611dcb565b81528452505050602081018390528115611e135781611e1d565b611e1d815161214c565b60408201529392505050565b60606000825151611e3b906001612d9a565b6001600160401b03811115611e5257611e5261332c565b604051818152601f19601f8301168101602001604052908015611e7c576020820181803683370190505b50905082602001511515600114611e94576000611e9a565b600160f81b5b81600081518110611ead57611ead613342565b60200101906001600160f81b031916908160001a905350600160005b845151811015611f3e5784518181518110611ee657611ee6613342565b60200101516001600160f81b031916838381518110611f0757611f07613342565b60200101906001600160f81b031916908160001a90535081611f2881613358565b9250508080611f3690613358565b915050611ec9565b50909392505050565b600060178211611f5957506001919050565b60ff8211611f6957506002919050565b61ffff8211611f7a57506003919050565b63ffffffff8211611f8d57506005919050565b506009919050565b60008151611fa38351611f47565b6110079190612d9a565b600081600781900b8213611fcd57611c44816001600160401b0316611f47565b611c44611fdc82600019613372565b6001600160401b0316611f47565b50919050565b611ff8612928565b61200381518361218a565b5060006020820152919050565b61201c82600483612207565b5050565b61202d826002835161220e565b611a928183519061232b565b61201c8282612352565b60608160200151156120675760405162461bcd60e51b81526004016107db906133d8565b81515192915050565b60606120836005607f60991b0184612380565b6000806005607f60991b0188868661209c57600061209f565b60015b8a8a8e6040516020016120b7969594939291906133e8565b6040516020818303038152906040526040516120d39190613471565b600060405180830381855af49150503d806000811461210e576040513d603f01601f191681016040523d815291503d6000602084013e612113565b606091505b50915091508161213657604051638a7db5bf60e01b815260040160405180910390fd5b61213f816123c8565b9998505050505050505050565b6000612157826124a7565b1561216457506000919050565b600060208301519050612176816124f0565b915060086020845103028201915050919050565b6121a560405160408082019052606081526000602082015290565b6121b060208361347d565b156121d8576121c060208361347d565b6121cb906020612cbc565b6121d59083612d9a565b91505b6020830182905260405180845260008152828101602001818110156121fc57600080fd5b604052509192915050565b611a928383835b6017816001600160401b03161161223457611bed60e0600584901b1682178451906126e5565b60ff816001600160401b0316116122755761225c6018611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600185519190612758565b61ffff816001600160401b0316116122b75761229e6019611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600285519190612758565b63ffffffff816001600160401b0316116122fb576122e2601a611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600485519190612758565b612312601b611fe0600585901b16178451906126e5565b50611bed6001600160401b038216600885519190612758565b61234660405160408082019052606081526000602082015290565b611c44838384516127e7565b60008160070b126123695761201c8260008361220e565b61201c82600161237b84600019613372565b61220e565b47818110156123a6578082604051634787a10360e11b81526004016107db929190612ea8565b823f151580611bed5760405163064d954b60e41b815260040160405180910390fd5b6060600080806020850185518101906123e19190613594565b919450925090506001600160401b03821661241b5780511561241657604051630e74990760e01b815260040160405180910390fd5b61247e565b6001600160401b0382166051148061243c57506001600160401b0382166071145b1561246357805160000361241657604051630e74990760e01b815260040160405180910390fd5b8160405163f1f6bced60e01b81526004016107db91906135fe565b821561249f578260405163d4bb667160e01b81526004016107db91906129e1565b949350505050565b60008060208301815b84518110156124e5578151925082156124ce57506000949350505050565b6020918201916124de9082612d9a565b90506124b0565b506001949350505050565b60008115600181146126dc57600160801b68010000000000000000640100000000620100006101006010600460026000198b019081041790810417908104179081041790810417908104179081041790810417600101926040517ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd81527ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe60208201527ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a827252361660408201527fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff60608201527ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e60808201527fe39ed557db96902cd38ed14fad815115c786af479b7e8324736353433727170760a08201527fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d236242260660c08201527f753a6d1b65325d0c552a4d1345224105391a310b29122104190a11030902010060e082015261010081016040527e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff600160f81b8082880204818160ff0385015104600160ff1b861161010002019650600019850185166126d2576001870196505b5050505050611fea565b50600092915050565b61270060405160408082019052606081526000602082015290565b600083515190506000612714826001612d9a565b9050846020015182106127355761273585612730836002612d7b565b6128c1565b8451602083820101858153815183111561274d578282525b509495945050505050565b61277360405160408082019052606081526000602082015290565b6000845151905060006127868285612d9a565b905085602001518111156127a3576127a386612730836002612d7b565b600060016127b38661010061371a565b6127bd9190612cbc565b9050865182810187831982511617815281518411156127da578382525b5096979650505050505050565b61280260405160408082019052606081526000602082015290565b825182111561281057600080fd5b6000845151905060006128238483612d9a565b905085602001518111156128405761284086612730836002612d7b565b6000808751805185602083010193508085111561285b578482525b505050602086015b6020861061289b578051825261287a602083612d9a565b9150612887602082612d9a565b9050612894602087612cbc565b9550612863565b60001960208790036101000a018019825116818451161790925250959695505050505050565b6000825190506128d1838361218a565b50611bed838261232b565b60405180606001604052806128fb604051602081016040526060815290565b815260200161291b60405160408082019052606081526000602082015290565b8152600060209091015290565b604051806040016040528061294e60405160408082019052606081526000602082015290565b8152602001600081525090565b60006001600160a01b038216611007565b6129758161295b565b81146119d857600080fd5b80356110078161296c565b80612975565b80356110078161298b565b600080604083850312156129b2576129b2600080fd5b60006129be8585612980565b92505060206129cf85828601612991565b9150509250929050565b805b82525050565b6020810161100782846129d9565b600060208284031215612a0457612a04600080fd5b600061249f8484612991565b8015156129db565b602081016110078284612a10565b600060208284031215612a3b57612a3b600080fd5b600061249f8484612980565b60008060408385031215612a5d57612a5d600080fd5b60006129be8585612991565b6129db8161295b565b6101608101612a81828e6129d9565b612a8e602083018d6129d9565b612a9b604083018c6129d9565b612aa8606083018b6129d9565b612ab5608083018a6129d9565b612ac260a08301896129d9565b612acf60c08301886129d9565b612adc60e08301876129d9565b612aea610100830186612a69565b612af86101208301856129d9565b612b06610140830184612a69565b9c9b505050505050505050505050565b602081016110078284612a69565b634e487b7160e01b600052602160045260246000fd5b600781106119d8576119d8612b24565b80612b5481612b3a565b919050565b600061100782612b4a565b6129db81612b59565b602081016110078284612b64565b6001600160401b0381166129db565b60e08101612b98828a6129d9565b612ba560208301896129d9565b612bb260408301886129d9565b612bbf60608301876129d9565b612bcc60808301866129d9565b612bd960a0830185612a69565b612be660c0830184612b7b565b98975050505050505050565b60005b83811015612c0d578082015183820152602001612bf5565b50506000910152565b6000612c26826000815192915050565b808452602084019350612c3d818560208601612bf2565b601f01601f19169290920192915050565b60208082528101611c448184612c16565b601b81526000602082017f72657761726420496e73756666696369656e742062616c616e63650000000000815291505b5060200190565b6020808252810161100781612c5f565b634e487b7160e01b600052601160045260246000fd5b8181038181111561100757611007612ca6565b60a08101612cdd82886129d9565b612cea6020830187612a69565b612cf76040830186612a69565b612d046060830185612a69565b611d4a60808301846129d9565b600b81526000602082016a2737ba1036b0b730b3b2b960a91b81529150612c8f565b6020808252810161100781612d11565b60118152600060208201702737ba1039b2b93b32b91039b4b3b732b960791b81529150612c8f565b6020808252810161100781612d43565b818102808215838204851417612d9357612d93612ca6565b5092915050565b8082018082111561100757611007612ca6565b60408101612dbb8285612a69565b611c4460208301846129d9565b601681526000602082017514985a5cd9481c1b185b881a185cc8195e1c1a5c995960521b81529150612c8f565b6020808252810161100781612dc8565b601b81526000602082017f4d6f7265207468616e20746865206e756d62657220726169736564000000000081529150612c8f565b6020808252810161100781612e05565b60808101612e5782876129d9565b612e646020830186612a69565b612e716040830185612a69565b611d0160608301846129d9565b634e487b7160e01b600052601260045260246000fd5b600082612ea357612ea3612e7e565b500490565b60408101612dbb82856129d9565b602181526000602082017f736563757269747946756e6420496e73756666696369656e742062616c616e638152606560f81b602082015291505b5060400190565b6020808252810161100781612eb6565b60608101612f158286612a69565b612f2260208301856129d9565b61249f60408301846129d9565b600b81526000602082016a57726f6e6720737461746560a81b81529150612c8f565b6020808252810161100781612f2f565b6014815260006020820173496e73756666696369656e742062616c616e636560601b81529150612c8f565b6020808252810161100781612f61565b602d81526000602082017f5261697365207374617465206d7573742062652057616974696e675061794f5081526c14d4d958dd5c9a5d1e519d5b99609a1b60208201529150612ef0565b6020808252810161100781612f9c565b601781526000602082017f57726f6e67206f70732073656375726974792066756e6400000000000000000081529150612c8f565b6020808252810161100781612ff6565b601d81526000602082017f4f5053536563757269747946756e6420686173206265656e207061696400000081529150612c8f565b602080825281016110078161303a565b6060810161308c82866129d9565b612f226020830185612a69565b604081016130a782856129d9565b611c446020830184612b64565b602481526000602082017f6f7073536563757269747946756e6420496e73756666696369656e742062616c815263616e636560e01b60208201529150612ef0565b60208082528101611007816130b4565b601681526000602082017557726f6e67207769746864726177206164647265737360501b81529150612c8f565b6020808252810161100781613105565b801515612975565b60008151905061100781613142565b60006020828403121561316e5761316e600080fd5b600061249f848461314a565b601781526000602082017f636c6f736520726169736520706c616e206661696c656400000000000000000081529150612c8f565b602080825281016110078161317a565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612ef0565b60208082528101611007816131be565b60006110076001600160401b038316613228565b90565b6001600160401b031690565b6129db81613211565b600061100761324f6132258460070b90565b60070b90565b6129db8161323d565b6040810161326c8285613234565b611c446020830184613255565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612c8f565b6020808252810161100781613279565b60006110078260601b90565b6000611007826132bb565b6129db6132de8261295b565b6132c7565b61020560f11b815260020160006132fa82846132d2565b50601401919050565b806129db565b60006133158284613303565b50602001919050565b602081016110078284613234565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019820361336b5761336b612ca6565b5060010190565b600061337e8260070b90565b915061338a8360070b90565b925050818103677fffffffffffffff198112677fffffffffffffff8213171561100757611007612ca6565b600c81526000602082016b24b73b30b634b21021a127a960a11b81529150612c8f565b60208082528101611007816133b5565b60c081016133f68289612b7b565b61340360208301886129d9565b6134106040830187612b7b565b61341d6060830186612b7b565b818103608083015261342f8185612c16565b905061343e60a0830184613234565b979650505050505050565b6000613459826000815192915050565b613467818560208601612bf2565b9290920192915050565b6000611c448284613449565b60008261348c5761348c612e7e565b500690565b6000815190506110078161298b565b6001600160401b038116612975565b600081519050611007816134a0565b601f19601f83011681018181106001600160401b03821117156134e3576134e361332c565b6040525050565b60006134f96000604051905090565b9050612b5482826134be565b60006001600160401b0382111561351e5761351e61332c565b601f19601f83011660200192915050565b600061354261353d84613505565b6134ea565b90508281526020810184848401111561355d5761355d600080fd5b613568848285612bf2565b509392505050565b600082601f83011261358457613584600080fd5b815161249f84826020860161352f565b6000806000606084860312156135ac576135ac600080fd5b60006135b88686613491565b93505060206135c9868287016134af565b92505060408401516001600160401b038111156135e8576135e8600080fd5b6135f486828701613570565b9150509250925092565b602081016110078284612b7b565b80825b600185111561364b5780860481111561362a5761362a612ca6565b600185161561363857908102905b80026136448560011c90565b945061360f565b94509492505050565b60008261366357506001611c44565b8161367057506000611c44565b81600181146136865760028114613690576136bd565b6001915050611c44565b60ff8411156136a1576136a1612ca6565b8360020a9150848211156136b7576136b7612ca6565b50611c44565b5060208310610133831016604e8410600b84101617156136f0575081810a838111156136eb576136eb612ca6565b611c44565b6136fd848484600161360c565b9250905081840481111561371357613713612ca6565b0292915050565b6000611c44600019848461365456fea264697066735822122056b72f215facb61186c797a7eb9bb307379f2d7f0ba7045dd315ed1fe9bc54d564736f6c63430008110033a2646970667358221220c411b68a019d674a1e7718aba0c31a7706cdc64e3af79efa38453a85192624ba64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7890,
        "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
        "label": "raiseID",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7895,
        "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
        "label": "inactivePlan",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7899,
        "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
        "label": "activePlan",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_uint256)"
      },
      {
        "astId": 7904,
        "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
        "label": "plans",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(RaisePlan)9493_storage)"
      },
      {
        "astId": 7906,
        "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
        "label": "manager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(RaisePlan)9493_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILetsFilRaiseFactory.RaisePlan)",
        "numberOfBytes": "32",
        "value": "t_struct(RaisePlan)9493_storage"
      },
      "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint64,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RaisePlan)9493_storage": {
        "encoding": "inplace",
        "label": "struct ILetsFilRaiseFactory.RaisePlan",
        "members": [
          {
            "astId": 9486,
            "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
            "label": "sponsor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9488,
            "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
            "label": "minerId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9490,
            "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
            "label": "raiseId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9492,
            "contract": "contracts/LetsFilRaiseFactory.sol:LetsFilRaiseFactory",
            "label": "raiseAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}